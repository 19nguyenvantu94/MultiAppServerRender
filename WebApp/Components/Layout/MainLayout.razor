@using WebApp.State
@* @using WebApp.State *@
@using static WebApp.Components.Pages.Account.Login

@inherits LayoutComponentBase

<MudThemeProvider Theme="_currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<AuthorizeView>
    <NotAuthorized>
        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
            <MudPaper Elevation="25" Class="pa-8" Style="width: 500px;">
                @Body
            </MudPaper>
        </MudContainer>
    </NotAuthorized>

    <Authorized>
        <MudLayout>
            <CascadingValue Value="this">
                <MudAppBar Elevation="25">
                    <MudIcon Icon="@CustomIcons.BlazorHero" Size="Size.Large" ViewBox="0 0 500 500" />
                    <MudText Typo="Typo.h6" Class="ml-4">MultiApp</MudText>
                    <MudToolBar DisableGutters="true">
                        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
                    </MudToolBar>
                    <MudSpacer />
                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                        <MudTooltip Text="Toggle Dark Mode">
                            <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => ToggleDarkMode())" />
                        </MudTooltip>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudMenu StartIcon="@Icons.Material.Filled.Settings" Color="Color.Inherit" Dense="true">
                            <div class="px-2">
                                <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => ToggleDarkMode())" />
                            </div>
                        </MudMenu>
                    </MudHidden>

                    <UserProfile />
                    @*  <ActivatorContent>
                    <MudAvatar Color="Color.Secondary">@userViewModel.UserName.Substring(0, 1)</MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                    <MudDivider Class="mb-2" />
                    <MudListItem Text="Account" Href="/account/profile" Icon="@Icons.Material.Outlined.Person" />
                    <MudListItem Text="Logout" Icon="@Icons.Material.Filled.Logout" OnClick="Logout" />
                    </ChildContent> *@
                </MudAppBar>
                <MudMainContent Style="min-height: 100vh; display: flex; flex-direction: column">
                    <MudContainer MaxWidth="MaxWidth.False" Style="flex: 1">
                      @*   @TopSection *@
                        <MudPaper Class="py-4" Elevation="0">
                            @Body
                        </MudPaper>
                    </MudContainer>
                    <Footer />
                </MudMainContent>
            </CascadingValue>
        </MudLayout>
    </Authorized>
</AuthorizeView>

@code {

    private MudTheme _currentTheme;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    bool _navMenuOpened = true;

    bool _toggleDarkMode = true;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject] AppState appState { get; set; }


    // [Inject] protected IAccountApiClient accountApiClient { get; set; }

    //Gets context that contains auth state
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    //Injects Nav Man to redirect
    [Inject] private NavigationManager? NavMan { get; set; }

    private UserProfileViewModel? profile { get; set; }
    // UserViewModel userViewModel;

    public RenderFragment TopSection => topSection?.ChildContent;

    TopSection topSection;

    public void SetTopSection(TopSection topSection)
    {
        this.topSection = topSection;
        Update();
    }

    public void Update()
    {
        if (topSection != null)
            StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {

        _currentTheme = BlazorHeroTheme.DefaultTheme;

        var user = (await authenticationStateTask).User;

        if (user.Identity!.IsAuthenticated)
        {
            profile = await appState.GetUserProfile();

            _navMenuOpened = profile.IsNavOpen;

            _toggleDarkMode = profile.IsDarkMode;

            // userViewModel = await ((IdentityAuthenticationStateProvider)authStateProvider).GetUserViewModel();

            _currentTheme = _toggleDarkMode

        ? BlazorHeroTheme.DefaultTheme
        : BlazorHeroTheme.DarkTheme;
        }

        await Task.CompletedTask;

    }

    private void DrawerToggle()
    {
        _navMenuOpened = !_navMenuOpened;
    }

    private async Task ToggleDarkMode()
    {
        _toggleDarkMode = !_toggleDarkMode;

        _currentTheme = _toggleDarkMode
            ? BlazorHeroTheme.DefaultTheme
            : BlazorHeroTheme.DarkTheme;

        await Task.FromResult(true);
    }

    private void Logout()
    {
        var parameters = new DialogParameters
            {
                {nameof(Dialogs.Logout.ContentText), $"Logout Confirmation"},
                {nameof(Dialogs.Logout.ButtonText), $"Logout"},
                {nameof(Dialogs.Logout.Color), Color.Error}
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        _dialogService.Show<Dialogs.Logout>("Logout", parameters, options);
    }
}
