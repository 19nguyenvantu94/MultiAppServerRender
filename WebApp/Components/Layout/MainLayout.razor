@using WebApp.State
@using static WebApp.Components.Pages.Account.Login
@inherits RootLayout

<MudThemeProvider Theme="_currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<AuthorizeView>
    <NotAuthorized>
        <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
            <MudPaper Elevation="25" Class="pa-8" Style="width: 500px;">
                @Body
            </MudPaper>
        </MudContainer>
    </NotAuthorized>

    <Authorized>
        <CascadingValue Value="this">
            <MudLayout>
                <MudAppBar Elevation="2">
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                    <MudSpacer />
                    <TopRightBarSection />
                </MudAppBar>
             @*    <MudAppBar Elevation="25">

                    <MudIcon Icon="@CustomIcons.BlazorHero" Size="Size.Large" ViewBox="0 0 500 500" />
                    <MudText Typo="Typo.h6" Class="ml-4">MultiApp</MudText>

                    <MudToolBar DisableGutters="true">
                        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                        <MudSpacer />
                        <TopRightBarSection />
                    </MudToolBar>

                    <MudTooltip Text="Toggle Dark Mode">
                        <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => ToggleDarkMode())" />
                    </MudTooltip>
                    <MudSpacer />

                    <MudMenu>
                        <ChildContent>
                            <UserCard Class="mt-n2" />
                            <MudDivider Class="mb-2" />
                            <MudListItem Text="Account" Href="/account/profile" Icon="@Icons.Material.Outlined.Person" />
                            <MudListItem Text="Logout" Icon="@Icons.Material.Filled.Logout" OnClick="Logout" />
                        </ChildContent>
                    </MudMenu>
                </MudAppBar> *@
                @*  <MudAppBar Elevation="4" Color="Color.Primary">
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => DarkMode())" />
                </MudAppBar>
                <MudAppBar Elevation="2">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudSpacer />
                <TopRightBarSection />
                </MudAppBar> *@
                <MudDrawer @bind-Open="@_navMenuOpened" Elevation="2">
                    <NavMenu />
                    <DrawerFooter />
                </MudDrawer>
                <MudMainContent Style="min-height: 100vh; display: flex; flex-direction: column">
                    <MudContainer MaxWidth="MaxWidth.False" Style="flex: 1">
                        @TopSection
                        <MudPaper Class="py-4" Elevation="0">
                            @Body
                        </MudPaper>
                    </MudContainer>
                    <Footer />
                </MudMainContent>
                <MudScrollToTop TopOffset="400" Style="z-index:2000;">
                    <MudFab StartIcon="@Icons.Material.Filled.KeyboardArrowUp" Color="Color.Primary" />
                </MudScrollToTop>
            </MudLayout>
        </CascadingValue>
    </Authorized>
</AuthorizeView>

@code {

    private MudTheme _currentTheme;


    bool _navMenuOpened = true;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject] AppState appState { get; set; }


    // [Inject] protected IAccountApiClient accountApiClient { get; set; }

    //Gets context that contains auth state
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    //Injects Nav Man to redirect
    [Inject] private NavigationManager? NavMan { get; set; }

    private UserProfileViewModel? profile { get; set; }


    protected override async Task OnInitializedAsync()
    {

        _currentTheme = BlazorHeroTheme.DefaultTheme;

        var user = (await authenticationStateTask).User;

        if (user.Identity!.IsAuthenticated)
        {
            profile = await appState.GetUserProfile();

            _navMenuOpened = profile.IsNavOpen;
        }

        await Task.CompletedTask;

    }

    private void DrawerToggle()
    {
        _navMenuOpened = !_navMenuOpened;
    }

    private async Task ToggleDarkMode()
    {
        bool isDarkMode = profile!.IsDarkMode;
        _currentTheme = isDarkMode
            ? BlazorHeroTheme.DefaultTheme
            : BlazorHeroTheme.DarkTheme;

        await Task.FromResult(true);
    }

    private void Logout()
    {
        var parameters = new DialogParameters
            {
                {nameof(Dialogs.Logout.ContentText), $"Logout Confirmation"},
                {nameof(Dialogs.Logout.ButtonText), $"Logout"},
                {nameof(Dialogs.Logout.Color), Color.Error},
                // {nameof(Dialogs.Logout.CurrentUserId), CurrentUserId},
                // {nameof(Dialogs.Logout.HubConnection), hubConnection}
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        _dialogService.Show<Dialogs.Logout>("Logout", parameters, options);
    }
}
