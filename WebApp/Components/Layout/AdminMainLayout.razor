@inherits LayoutComponentBase

@* <MudThemeProvider Theme="_currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />
 *@
<AuthorizeView>

    <Authorized>
        <div class="page">
            <div id="wrapper">
                <div>
                    @*Initialize the Toolbar component*@
                    <SfAppBar ColorMode="AppBarColor.Primary">
                        <SfButton CssClass="e-inherit" IconCss="e-icons e-menu" @onclick="Toggle"></SfButton>
                        <span class="regular">Blazor AppBar</span>
                        <AppBarSpacer></AppBarSpacer>
                        <SfButton CssClass="e-inherit" Content="FREE TRIAL"></SfButton>
                    </SfAppBar>
                </div>
                <SfSidebar EnableDock="true" DockSize="60px" @attributes="@HtmlAttribute" Width="290px" Target=".e-main-content" MediaQuery="(min-width:600px)" @bind-IsOpen="SidebarToggle">
                    <ChildContent>
                        <div class="main-menu">
                            <div>
                                <SfTreeView CssClass="main-treeview" ExpandOn="@Expand" TValue="TreeData">
                                    <TreeViewFieldsSettings Id="NodeId" NavigateUrl="NavigateUrl" Text="NodeText" IconCss="IconCss" DataSource="Treedata" HasChildren="HasChild" ParentID="Pid">
                                    </TreeViewFieldsSettings>
                                </SfTreeView>
                            </div>
                        </div>
                    </ChildContent>
                </SfSidebar>
                <!-- end of sidebar element -->
                @*main-content declaration*@
                <div class="main-content" id="main-text">
                    <div class="sidebar-content">
                        <div class="content px-4">
                        </div>
                    </div>
                    <!--end of main content declaration -->
                </div>
            </div>
        </div>
        @*       <SfDashboardLayout>
        <DashboardLayoutPanels>
        <DashboardLayoutPanel>

        </DashboardLayoutPanel>
        </DashboardLayoutPanels>
        </SfDashboardLayout> *@
        @* <MudLayout>
        <CascadingValue Value="this">
        <MudAppBar Elevation="25">
        <MudIcon Icon="@CustomIcons.BlazorHero" Size="Size.Large" ViewBox="0 0 500 500" />
        <MudText Typo="Typo.h6" Class="ml-4">MultiApp</MudText>
        <MudToolBar DisableGutters="true">
        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
        </MudToolBar>
        <MudSpacer />
        <MudTooltip Text="Toggle Dark Mode">
        <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => ToggleDarkMode())" />
        </MudTooltip>
        <AccountProfile />
        </MudAppBar>
        <MudDrawer @bind-Open="_navMenuOpened" Elevation="25" ClipMode="DrawerClipMode.Always">
        <AdminNavMenu />
        </MudDrawer>
        <MudMainContent Style="min-height: 100vh; display: flex; flex-direction: column">
        <MudContainer MaxWidth="MaxWidth.False" Style="flex: 1">
        @Body
        </MudContainer>
        <footer class="page-footer">
        <TenantInfo />
        </footer>
        </MudMainContent>
        </CascadingValue>
        </MudLayout> *@
    </Authorized>
</AuthorizeView>



@code {

    SfSidebar sidebarObj;
    public string Target = ".maincontent";
    public bool SidebarToggle = false;
    public string SidebarWidth = "280px";
    public string SidebarContentClass = "text-content";
    public ExpandAction Expand = ExpandAction.Click;
    Dictionary<string, object> HtmlAttribute = new Dictionary<string, object>()
    {
        {"class", "sidebar-treeview" }
    };
    public void Toggle()
    {
        SidebarToggle = !SidebarToggle;
        if (SidebarToggle)
        {
            SidebarWidth = "180px";
            SidebarContentClass = "text-content minimized";
        }
        else
        {
            SidebarWidth = "180px";
            SidebarContentClass = "text-content";
        }
    }
    public class TreeData
    {
        public string NodeId { get; set; }
        public string NodeText { get; set; }
        public string IconCss { get; set; }
        public bool HasChild { get; set; }
        public string Pid { get; set; }
        public string NavigateUrl { get; set; }
    }
    private List<TreeData> Treedata = new List<TreeData>();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Treedata.Add(new TreeData { NodeId = "01", NodeText = "Installation", IconCss = "icon-microchip icon", NavigateUrl = "/error" });
        Treedata.Add(new TreeData { NodeId = "02", NodeText = "Deployment", IconCss = "icon-annotation-edit icon", NavigateUrl = "/counter" });
        Treedata.Add(new TreeData { NodeId = "03", NodeText = "Quick Start", IconCss = "icon-docs icon", NavigateUrl = "/" });
    }
}
