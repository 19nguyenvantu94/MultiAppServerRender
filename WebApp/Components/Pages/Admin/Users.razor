@page "/admin/users"
@attribute [Authorize(Policies.IsAdmin)]
@layout MainLayout

<TopSection>
    <Breadcrumbs>
        <Breadcrumb Link="/admin" Title=@L["BreadCrumbadmin"] />
        <Breadcrumb Title=@L["BreadCrumbadminusers"] />
    </Breadcrumbs>
</TopSection>

<PageTitle>@L["Users"]</PageTitle>

@if (users == null)
{
    <LoadingBackground>
        <label>@L["Loading"]</label>
    </LoadingBackground>
}
else
{
    <MudTable ServerData="@(new Func<TableState, Task<TableData<ApplicationUser>>>(ServerReload))" Striped="true" Bordered="true" Dense="true" Hover="true" Elevation="2" @ref="table">
        <HeaderContent>
            <MudTh><MudButton StartIcon="@Icons.Material.Filled.PersonAdd" OnClick="@(e => { createUserDialogOpen = true; })" Variant="Variant.Filled" Color="Color.Primary">@L["New User"]</MudButton></MudTh>
            <MudTh>@L["UserName"]</MudTh>
            <MudTh>@L["Email"]</MudTh>
            <MudTh>@L["Roles"]</MudTh>
        </HeaderContent>
        <RowTemplate Context="UserRow">
            <MudTd>
                <div style="width:155px;">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenEditDialog(UserRow))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.RotateRight" OnClick="@(() => OpenResetPasswordDialog(UserRow))" Disabled="@(UserRow.UserName == DefaultUserNames.Administrator)"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => OpenDeleteDialog(UserRow))" Disabled="@(UserRow.UserName == DefaultUserNames.Administrator)"></MudIconButton>
                </div>
            </MudTd>
            <MudTd><div style="width:130px;">@UserRow.UserName</div></MudTd>
            <MudTd style="white-space: nowrap">
                @UserRow.Email @if (UserRow.EmailConfirmed)
                {
                    <MudIcon Style="vertical-align: text-bottom" Icon="@Icons.Material.Filled.CheckCircle"></MudIcon>
                }
            </MudTd>
            <MudTd>
                @if (@UserRow.UserRoles != null)
                {
                    <MudChipSet>
                        @foreach (var ur in @UserRow.UserRoles)
                        {
                            <MudChip Text="@ur.Role.Name"></MudChip>
                        }
                    </MudChipSet>
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString=@L["Rows per page"] />
        </PagerContent>
    </MudTable>
}

<MudDialog @bind-IsVisible="@createUserDialogOpen">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
            @L["New User"]
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm id="createUserForm" Model="@newUserViewModel" OnValidSubmit="@CreateUserAsync">
            <FluentValidationValidator />
            <MudValidationSummary />
            <MudTextField @bind-Value="@newUserViewModel.UserName" Label=@L["UserName"] AdornmentIcon="@Icons.Material.Filled.Person" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"]></MudTextField>

            <MudTextField @bind-Value="@newUserViewModel.Email" Label=@L["Email"] AdornmentIcon="@Icons.Material.Outlined.Email" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"] Type="mail"></MudTextField>

            <MudTextField @bind-Value="@newUserViewModel.Password" Label=@L["Password"] AdornmentIcon="@Icons.Material.Outlined.Lock" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"] InputType="InputType.Password"></MudTextField>

            <MudTextField @bind-Value="@newUserViewModel.PasswordConfirm" Label=@L["Password Confirmation"] AdornmentIcon="@Icons.Material.Outlined.Lock" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"] InputType="InputType.Password"></MudTextField>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { createUserDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton ButtonType="ButtonType.Submit" form="createUserForm" Disabled="@disableCreateUserButton" Variant="Variant.Filled" Color="Color.Primary">@L["Create"]</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="@editDialogOpen">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            @L["Edit {0}", currentUser.UserName]
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm id="updateUserForm" Model="@currentUser" OnValidSubmit="@UpdateUserAsync">
            <FluentValidationValidator />
            <MudValidationSummary />
            <MudTextField @bind-Value="@currentUser.UserName" Label=@L["UserName"] AdornmentIcon="@Icons.Material.Filled.Person" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"]></MudTextField>

            <MudTextField @bind-Value="@currentUser.Email" Label=@L["Email"] AdornmentIcon="@Icons.Material.Outlined.Email" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"] Type="mail"></MudTextField>

            <MudChipSet>
                @foreach (var role in roleSelections.OrderBy(x => x.DisplayValue))
                {
                    <MudChip Text="@role.DisplayValue" Icon="@((role.Selected) ? Icons.Material.Filled.Done : "")" @onclick="@(()=>UpdateUserRole(role))" />
                }
            </MudChipSet>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@CancelChanges">@L["Cancel"]</MudButton>
        <MudButton ButtonType="ButtonType.Submit" form="updateUserForm" Disabled="@disableUpdateUserButton" Variant="Variant.Filled" Color="Color.Primary">@L["Update"]</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="@deleteUserDialogOpen" Style="z-index:100">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" />
            @L["Confirm Delete"]
        </MudText>
    </TitleContent>
    <DialogContent>
        @L["Are you sure you want to delete {0}?", currentUser.UserName]
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { deleteUserDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@DeleteUserAsync" Variant="Variant.Filled" Color="Color.Error">@L["Delete"]</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="@changePasswordDialogOpen">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            @L["Change password for {0}", currentUser.UserName]
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm id="changePasswordForm" Model="@changePasswordViewModel" OnValidSubmit="@ResetUserPasswordAsync">
            <FluentValidationValidator />
            <MudValidationSummary />
            <MudTextField @bind-Value="@changePasswordViewModel.Password" Label=@L["Password"] AdornmentIcon="@Icons.Material.Outlined.Lock" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"] InputType="InputType.Password"></MudTextField>

            <MudTextField @bind-Value="@changePasswordViewModel.PasswordConfirm" Label=@L["Password Confirmation"] AdornmentIcon="@Icons.Material.Outlined.Lock" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"] InputType="InputType.Password"></MudTextField>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { changePasswordDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton ButtonType="ButtonType.Submit" form="changePasswordForm" Disabled="@disableChangePasswordButton" Variant="Variant.Filled" Color="Color.Primary">@L["Reset Password"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MudTable<ApplicationUser> table;

    // [Inject] IViewNotifier viewNotifier { get; set; }
    [Inject] AuthenticationStateProvider authStateProvider { get; set; }
    [Inject] IAccountApiClient apiClient { get; set; }
    [Inject] protected IStringLocalizer<Localizer.Global> L { get; set; }

    protected IdentityAuthenticationStateProvider identityAuthenticationStateProvider;

    protected int pageSize { get; set; } = 10;
    private int pageIndex { get; set; } = 0;
    protected int totalItemsCount { get; set; } = 0;

    protected bool createUserDialogOpen = false;
    protected bool disableCreateUserButton = false;

    protected bool editDialogOpen = false;
    protected bool disableUpdateUserButton = false;

    protected bool deleteUserDialogOpen = false;

    protected bool changePasswordDialogOpen = false;
    protected bool disableChangePasswordButton = false;

    protected List<ApplicationUser> users { get; set; }
    protected List<SelectItem<Guid>> roleSelections { get; set; } = new();
    protected ApplicationUser currentUser { get; set; } = new ApplicationUser();
    protected RegisterViewModel newUserViewModel { get; set; } = new RegisterViewModel();
    protected ChangePasswordViewModel changePasswordViewModel { get; set; } = new ChangePasswordViewModel();

    protected override async Task OnInitializedAsync()
    {
        identityAuthenticationStateProvider = (IdentityAuthenticationStateProvider)authStateProvider;
        await LoadUsers();
        await LoadRoles();
    }

    protected async Task OnPage(int index, int size)
    {
        pageSize = size;
        pageIndex = index;

        await LoadUsers();
    }

    protected virtual async Task ReloadUser()
    {
        await LoadUsers();
    }
    protected async Task LoadUsers()
    {
        try
        {
            // apiClient.ClearEntitiesCache();
            var result = await apiClient.GetUsers(null, pageSize, pageIndex * pageSize);
            users = new List<ApplicationUser>(result);
            totalItemsCount = (int)result.InlineCount.Value;

            viewNotifier.Show($"{totalItemsCount} items found", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    protected async Task LoadRoles()
    {
        try
        {
            var result = await apiClient.GetRoles();

            roleSelections = result.Select(i => new SelectItem<Guid>
                {
                    Id = i.Id,
                    DisplayValue = i.Name,
                    Selected = false
                }).ToList();

        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    protected void OpenEditDialog(ApplicationUser user)
    {
        currentUser = user;

        foreach (var role in roleSelections)
            role.Selected = user.UserRoles.Any(i => i.RoleId == role.Id);

        editDialogOpen = true;
    }

    protected void OpenResetPasswordDialog(ApplicationUser user)
    {
        currentUser = user;

        changePasswordViewModel = new ChangePasswordViewModel() { UserId = user.Id.ToString() };

        changePasswordDialogOpen = true;
    }

    protected void OpenDeleteDialog(ApplicationUser user)
    {
        currentUser = user;
        deleteUserDialogOpen = true;
    }

    protected void UpdateUserRole(SelectItem<Guid> roleSelectionItem)
    {
        if (currentUser.UserName.ToLower() != DefaultUserNames.Administrator || roleSelectionItem.DisplayValue != DefaultRoleNames.Administrator)
            roleSelectionItem.Selected = !roleSelectionItem.Selected;
    }

    protected void CancelChanges()
    {
        editDialogOpen = false;
    }

    protected async Task UpdateUserAsync()
    {
        try
        {
            disableUpdateUserButton = true;

            var apiResponse = await identityAuthenticationStateProvider.AdminUpdateUser(new UserViewModel
            {

            });

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success);
                await ReloadUser();
                editDialogOpen = false;
            }
            else
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        finally
        {
            disableUpdateUserButton = false;
        }
    }
    protected async Task CreateUserAsync()
    {
        try
        {
            disableCreateUserButton = true;

            var apiResponse = await identityAuthenticationStateProvider.Create(newUserViewModel);

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success);
                await ReloadUser();
                newUserViewModel = new RegisterViewModel();
                createUserDialogOpen = false;
            }
            else
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["UserCreationFailed"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["UserCreationFailed"]);
        }
        finally
        {
            disableCreateUserButton = false;
        }
    }

    protected async Task ResetUserPasswordAsync()
    {
        try
        {
            disableChangePasswordButton = true;

            var apiResponse = await identityAuthenticationStateProvider.AdminChangePassword(changePasswordViewModel);

            if (apiResponse.IsSuccessStatusCode)
                viewNotifier.Show(L["Operation Successful"], ViewNotifierType.Success, apiResponse.Message);
            else
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error);

            changePasswordDialogOpen = false;
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["ResetPasswordFailed"]);
        }
        finally
        {
            disableChangePasswordButton = false;
        }
    }

    protected async Task DeleteUserAsync()
    {
        try
        {
            // apiClient.RemoveEntity(currentUser);
            viewNotifier.Show(L["Operation Successful"], ViewNotifierType.Success);
            deleteUserDialogOpen = false;
            await ReloadUser();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task<TableData<ApplicationUser>> ServerReload(TableState state)
    {
        await OnPage(state.Page, state.PageSize);

        return new TableData<ApplicationUser>() { TotalItems = totalItemsCount, Items = users };
    }
}
