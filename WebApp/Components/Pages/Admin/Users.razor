@page "/admin/users"
@using Microsoft.AspNetCore.WebUtilities
@using System.Net
@using WebApp.Components.Dialogs
@using WebApp.Constant
@attribute [Authorize]
@layout AdminMainLayout

<SfBreadcrumb>
    <BreadcrumbItems>
        <BreadcrumbItem Text="BreadCrumbAdmin" Url="/admin" />
        <BreadcrumbItem Text="BreadCrumbAdminUsers" Url="/admin/users" />
    </BreadcrumbItems>
</SfBreadcrumb>

<PageTitle>Users</PageTitle>

@if (!_loaded)
{
    <LoadingBackground>
    </LoadingBackground>
}
else
{

    <SfGrid DataSource="@users" AllowPaging="true">

        <GridTemplates>
            <ToolbarTemplate>
             @*    <SfToolbar>
                    <ToolbarEvents Clicked="ToolbarClickHandler"></ToolbarEvents>
                    <ToolbarItems>
                        <ToolbarItem Type="@ItemType.Button" PrefixIcon="e-chevron-up icon" Id="collapseall" Text="Collapse All"></ToolbarItem>
                        <ToolbarItem Type="@ItemType.Button" PrefixIcon="e-chevron-down icon" Id="ExpandAll" Text="Expand All"></ToolbarItem>
                    </ToolbarItems>
                </SfToolbar> *@
            </ToolbarTemplate>
        </GridTemplates>

        <GridPageSettings CurrentPage="@pageIndex" PageSize="@pageSize" EnableQueryString="true" PageSizes="@TablePageConstant.RowPerPage"></GridPageSettings>
        <GridEvents PageChanging="PageChangingHandler" OnLoad="LoadHandler" TValue="UserDataViewModel"></GridEvents>

        <GridColumns>
            <GridColumn HeaderText="Actions" IsFrozen="true" Freeze="FreezeDirection.Left" TextAlign="TextAlign.Left" Width="100"></GridColumn>
            <GridColumn Field=@nameof(UserDataViewModel.UserName) HeaderText="UserName" IsFrozen="true" Freeze="FreezeDirection.Left" TextAlign="TextAlign.Center" Width="100"></GridColumn>
            <GridColumn Field=@nameof(UserDataViewModel.Email) HeaderText="Email" IsFrozen="true" Freeze="FreezeDirection.Left" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(UserDataViewModel.FirstName) HeaderText="FirstName" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(UserDataViewModel.LastName) HeaderText="LastName" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(UserDataViewModel.PhoneNumber) HeaderText="PhoneNumber" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(UserDataViewModel.Email) HeaderText="Email" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(UserDataViewModel.IsActive) HeaderText="Active" TextAlign="TextAlign.Center" DisplayAsCheckBox="true"> </GridColumn>

            @*    <MudTh Class="fixed-column position">First Name</MudTh>
        <MudTh Class="fixed-column position2">Last Name</MudTh>
        <MudTh>UserName</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>PhoneNumber</MudTh>
        <MudTh>Email Confirmation</MudTh>
        <MudTh>Active</MudTh> *@
        </GridColumns>
    </SfGrid>
    @*  <MudTable @ref="table" ServerData="ServerReload" Hover="true" Elevation="25" HorizontalScrollbar="true" RowsPerPage="@pageSize" Items="users" FixedHeader="true" Dense="true" @bind-user="users">

        <ToolBarContent>
            <div class="justify-center mud-text-align-center">
                @if (_canCreateUsers)
                {
                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">

                        <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface">Register New User</MudButton>
                        <MudButton DisableElevation Variant="Variant.Filled" OnClick="Reload" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">Reload</MudButton>
                        @if (_canExportUsers)
                        {
                            <MudButton DisableElevation Variant="Variant.Filled" OnClick="ExportToExcel" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;">Export</MudButton>
                        }
                    </MudHidden>

                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudTooltip Text="Register New User">
                            <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface"></MudButton>
                        </MudTooltip>
                        <MudTooltip Text="Reload">
                            <MudButton DisableElevation Variant="Variant.Filled" OnClick="Reload" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary"></MudButton>
                        </MudTooltip>
                        @if (_canExportUsers)
                        {
                            <MudTooltip Text="Export">
                                <MudButton DisableElevation Variant="Variant.Filled" OnClick="ExportToExcel" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;"></MudButton>
                            </MudTooltip>
                        }
                    </MudHidden>
                }
                else
                {
                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                        <MudButton DisableElevation Variant="Variant.Filled" OnClick="Reload" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">Reload</MudButton>
                        @if (_canExportUsers)
                        {
                            <MudButton DisableElevation Variant="Variant.Filled" OnClick="ExportToExcel" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;">Export</MudButton>
                        }
                    </MudHidden>

                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudTooltip Text="Reload">
                            <MudButton DisableElevation Variant="Variant.Filled" OnClick="Reload" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary"></MudButton>
                        </MudTooltip>
                        @if (_canExportUsers)
                        {
                            <MudTooltip Text="Export">
                                <MudButton DisableElevation Variant="Variant.Filled" OnClick="ExportToExcel" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;"></MudButton>
                            </MudTooltip>
                        }
                    </MudHidden>
                }
            </div>
            <MudSpacer />
        </ToolBarContent>

        <HeaderContent>
            <MudTh>Actions</MudTh>
            <MudTh Class="fixed-column position">First Name</MudTh>
            <MudTh Class="fixed-column position2">Last Name</MudTh>
            <MudTh>UserName</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>PhoneNumber</MudTh>
            <MudTh>Email Confirmation</MudTh>
            <MudTh>Active</MudTh>

        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Actions">
                <MudMenu Label="Actions" Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Secondary">
                    @if (_canUpdateRoles)
                    {
                        <MudMenuItem OnClick="(()=>InvokeModal(context.Id.ToString()))">Edit User</MudMenuItem>
                    }
                    @if (_canViewRoles)
                    {
                        <MudMenuItem OnClick="(()=>ManageRoles(context.Id.ToString(), context.UserName))">Manage Roles</MudMenuItem>
                    }
                    @if (_canDeleteRoles)
                    {
                        <MudMenuItem @onclick="@(() => Delete(@context.Id.ToString()))">Delete</MudMenuItem>
                    }
                </MudMenu>
            </MudTd>
            <MudTd Class="fixed-column position" DataLabel="FirstName">
                <MudHighlighter Text="@context.FirstName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd Class="fixed-column position2" DataLabel="LastName">
                <MudHighlighter Text="@context.LastName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="UserName">
                <MudHighlighter Text="@context.UserName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Email">
                <MudHighlighter Text="@context.Email" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="PhoneNumber">
                <MudHighlighter Text="@context.PhoneNumber" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="EmailConfirmed"><MudCheckBox T="bool" Value="@context.EmailConfirmed" ReadOnly Color="Color.Secondary"></MudCheckBox></MudTd>
            <MudTd DataLabel="Active"><MudCheckBox T="bool" Value="@context.IsActive" ReadOnly Color="Color.Secondary"></MudCheckBox></MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager HorizontalAlignment="HorizontalAlignment.Left" PageSizeOptions="@TablePageConstant.RowPerPage" RowsPerPageString="Rows per page" />
        </PagerContent>
    </MudTable> *@
}
@code {
    // private MudTable<UserDataViewModel> table;

    [Inject] AccountApiClient apiClient { get; set; }
    [Inject] protected IStringLocalizer<Localizer.Global> L { get; set; }

    private bool _loaded = false;

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    public int pageSize { get; set; } = 10;

    public int pageIndex { get; set; } = 0;

    protected int totalItemsCount { get; set; } = 0;

    protected List<UserDataViewModel> users { get; set; }

    // protected UserDataViewModel user { get; set; }

    protected List<SelectItem<Guid>> roleSelections { get; set; } = new();
    protected UserDataViewModel currentUser { get; set; } = new UserDataViewModel();
    protected RegisterViewModel newUserViewModel { get; set; } = new RegisterViewModel();
    protected ChangePasswordViewModel changePasswordViewModel { get; set; } = new ChangePasswordViewModel();

    private bool _canCreateUsers;
    private bool _canSearchUsers;
    private bool _canExportUsers;
    private bool _canViewRoles;
    private bool _canDeleteRoles;
    private bool _canUpdateRoles;

    public string _searchString;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = (await authenticationStateTask).User;

            var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri); //you can use IURIHelper for older versions

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageSize", out var pageSizeData))
            {
                pageSize = Convert.ToInt16(pageSizeData.First());
            }

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageIndex", out var pageIndexData))
            {
                pageIndex = Convert.ToInt16(pageIndexData.First());
            }

            _canCreateUsers = user.Claims.Where(x => x.Value == PermissionsWebApp.User.Create).FirstOrDefault() != null;
            // _canSearchUsers = (await _authorizationService.AuthorizeAsync(state.User, PermissionsWebApp.User.Search)).Succeeded;
            _canExportUsers = user.Claims.Where(x => x.Value == PermissionsWebApp.User.Export).FirstOrDefault() != null;
            _canViewRoles = user.Claims.Where(x => x.Value == PermissionsWebApp.Role.Read).FirstOrDefault() != null;
            _canUpdateRoles = user.Claims.Where(x => x.Value == PermissionsWebApp.Role.Update).FirstOrDefault() != null;
            _canDeleteRoles = user.Claims.Where(x => x.Value == PermissionsWebApp.Role.Delete).FirstOrDefault() != null;

            await LoadUsers();
        }
        finally
        {
            _loaded = true;
        };
    }

    private async Task Delete(string id)
    {
        string deleteContent = "Delete Content";
        // var parameters = new DialogParameters
        //     {
        //         {nameof(DeleteConfirmation.ContentText), string.Format(deleteContent, id)}
        //     };
        // var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackdropClick = true };
        // var dialog = _dialogService.Show<DeleteConfirmation>("Delete", parameters, options);
        // var result = await dialog.Result;
        // if (!result.Canceled)
        // {
        //     var response = await _accountApiClient.DeleteUser(id);
        //     if (response.IsSuccessStatusCode)
        //     {
        //         await LoadUsers();
        //         // await HubConnection.SendAsync(ApplicationConstants.SignalR.SendUpdateDashboard);
        //         await table.ReloadServerData();
        //         viewNotifier.Show(response.Message, ViewNotifierType.Success);
        //     }
        //     else
        //     {
        //         await LoadUsers();

        //         viewNotifier.Show(response.Message, ViewNotifierType.Error);
        //     }
        // }
    }

    protected async Task LoadUsers()
    {
        try
        {
            // _loaded = false;

            var result = await apiClient.GetUsers(pageSize, pageIndex, "");
            users = result.Result;
            totalItemsCount = (int)result.Count;

            // viewNotifier.Show($"{result.Result.Count} items found", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            // viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        finally
        {
            _loaded = true;
        }
    }

    public async void PageChangingHandler(GridPageChangingEventArgs args)
    {
        await OnPage(args.CurrentPage, args.CurrentPageSize);
    }

    public async void LoadHandler(object args)
    {
        await OnPage(pageIndex, pageSize);
    }

    // private async Task<TableData<UserDataViewModel>> ServerReload(TableState state, CancellationToken cancellationToken)
    // {

    //     return new TableData<UserDataViewModel>() { TotalItems = totalItemsCount, Items = users };

    // }

    protected async Task OnPage(int index, int size)
    {
        pageSize = size;
        pageIndex = index;

        await LoadUsers();
    }

    // private async Task InvokeModal(string id = null)
    // {
    //     var parameters = new DialogParameters();

    //     if (id != null)
    //     {
    //         user = users!.Where(c => c.Id.ToString() == id).FirstOrDefault()!;
    //         if (user != null)
    //         {
    //             parameters.Add(nameof(RegisterUser.RegisterUserModel), new RegisterViewModel
    //                 {
    //                     Id = user.Id,
    //                     UserName = user.UserName,
    //                     FirstName = user.FirstName,
    //                     LastName = user.LastName,
    //                     Email = user.Email,
    //                     PhoneNumber = user.PhoneNumber,
    //                     ActivateUser = user.IsActive,
    //                     AutoConfirmEmail = user.EmailConfirmed
    //                 });
    //         }
    //     }

    //     var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackdropClick = true };
    //     var dialog = _dialogService.Show<RegisterUser>(id == Guid.Empty.ToString() ? "Create" : "Edit", parameters, options);
    //     var result = await dialog.Result;
    //     if (!result!.Canceled)
    //     {
    //         await LoadUsers();
    //         await table.ReloadServerData();
    //     }
    // }

    private void ViewProfile(string userId)
    {
        _navigationManager.NavigateTo($"/admin/user-profile/{userId}");
    }

    // protected async Task Reload()
    // {

    // }

    private void ManageRoles(string userId, string userName)
    {
        _navigationManager.NavigateTo($"/admin/user-roles/{userId}");
    }

    private async Task ExportToExcel()
    {
        // var base64 = await _userManager.ExportToExcelAsync(_searchString);
        // await _jsRuntime.InvokeVoidAsync("Download", new
        // {
        //     ByteArray = base64,
        //     FileName = $"{nameof(Users).ToLower()}_{DateTime.Now:ddMMyyyyHHmmss}.xlsx",
        //     MimeType = ApplicationConstants.MimeTypes.OpenXml
        // });
        // _snackBar.Add(string.IsNullOrWhiteSpace(_searchString)
        //     ? _localizer["Users exported"]
        //     : _localizer["Filtered Users exported"], Severity.Success);
    }
}
