@page "/admin/users"
@using WebApp.Components.Dialogs
@attribute [Authorize(Policies.IsAdmin)]
@layout AdminMainLayout

@* <TopSection>
    <Breadcrumbs>
        <Breadcrumb Link="/admin" Title=@L["BreadCrumbadmin"] />
        <Breadcrumb Title=@L["BreadCrumbadminusers"] />
    </Breadcrumbs>
</TopSection> *@

<style>
    .mud-table-container {
        overflow: auto;
    }
</style>


<MudBreadcrumbs Items="_items"></MudBreadcrumbs>

<PageTitle>Users</PageTitle>

@if (!_loaded)
{
    <LoadingBackground>
    </LoadingBackground>
}
else
{
    @*  <MudTable ServerData="@(new Func<TableState, Task<TableData<UserViewModel>>>(ServerReload))" Striped="true" Bordered="true" Dense="true" Hover="true" Elevation="2" @ref="table"> *@

    <MudTable Hover="true" Elevation="25" Items="users" Dense="true" Filter="new Func<UserViewModel, bool>(Search)" @bind-user="users">

        <ToolBarContent>
            <div class="justify-center mud-text-align-center">
                @if (_canCreateUsers)
                {
                    <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface">Register New User</MudButton>
                    <MudButton DisableElevation Variant="Variant.Filled" OnClick="LoadUsers" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">Reload</MudButton>
                    @if (_canExportUsers)
                    {
                        <MudButton DisableElevation Variant="Variant.Filled" OnClick="ExportToExcel" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;">Export</MudButton>
                    }
                }
                else
                {
                    <MudButton DisableElevation Variant="Variant.Filled" OnClick="LoadUsers" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">Reload</MudButton>
                    @if (_canExportUsers)
                    {
                        <MudButton DisableElevation Variant="Variant.Filled" OnClick="ExportToExcel" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;">Export</MudButton>
                    }
                }
            </div>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Immediate="true" FullWidth=false Placeholder="Search For Users" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>Actions</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.FirstName)">First Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.LastName)">Last Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.UserName)">UserName</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.Email)">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.PhoneNumber)">PhoneNumber</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.EmailConfirmed)">Email Confirmation</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x => x.IsActive)">Active</MudTableSortLabel></MudTh>

        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Actions">
                <MudMenu Label="Actions" Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Secondary">
                    <MudMenuItem OnClick="(()=>ViewProfile(context.Id.ToString()))">View Profile</MudMenuItem>
                    @if (_canViewRoles)
                    {
                        <MudMenuItem OnClick="(()=>ManageRoles(context.Id.ToString(), context.UserName))">Manage Roles</MudMenuItem>
                    }
                </MudMenu>
            </MudTd>
            <MudTd DataLabel="FirstName">
                <MudHighlighter Text="@context.FirstName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="LastName">
                <MudHighlighter Text="@context.LastName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="UserName">
                <MudHighlighter Text="@context.UserName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Email">
                <MudHighlighter Text="@context.Email" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="PhoneNumber">
                <MudHighlighter Text="@context.PhoneNumber" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="EmailConfirmed"><MudCheckBox @bind-Checked="@context.EmailConfirmed" ReadOnly Color="Color.Secondary"></MudCheckBox></MudTd>
            <MudTd DataLabel="Active"><MudCheckBox @bind-Checked="@context.IsActive" ReadOnly Color="Color.Secondary"></MudCheckBox></MudTd>
        </RowTemplate>
        @* <RowTemplate Context="UserRow">
    <MudTd>
    <div style="width:155px;">
    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenEditDialog(UserRow))"></MudIconButton>
    <MudIconButton Icon="@Icons.Material.Filled.RotateRight" OnClick="@(() => OpenResetPasswordDialog(UserRow))" Disabled="@(UserRow.UserName == DefaultUserNames.Administrator)"></MudIconButton>
    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => OpenDeleteDialog(UserRow))" Disabled="@(UserRow.UserName == DefaultUserNames.Administrator)"></MudIconButton>
    </div>
    </MudTd>
    <MudTd><div style="width:130px;">@UserRow.UserName</div></MudTd>
    <MudTd style="white-space: nowrap">
    @UserRow.Email @if (UserRow.EmailConfirmed)
    {
    <MudIcon Style="vertical-align: text-bottom" Icon="@Icons.Material.Filled.CheckCircle"></MudIcon>
    }
    </MudTd>
    <MudTd>
    @if (@UserRow.Roles != null)
    {
    <MudChipSet>
    @foreach (var ur in @UserRow.Roles)
    {
    <MudChip Text="@ur"></MudChip>
    }
    </MudChipSet>
    }
    </MudTd>
    </RowTemplate> *@
        <PagerContent>
            <MudTablePager RowsPerPageString="Rows per page" />
        </PagerContent>
    </MudTable>
}

@* <MudDialog @bind-IsVisible="@createUserDialogOpen">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
            @L["New User"]
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm id="createUserForm" Model="@newUserViewModel" OnValidSubmit="@CreateUserAsync">
            <FluentValidationValidator />
            <MudValidationSummary />
            <MudTextField @bind-Value="@newUserViewModel.UserName" Label=@L["UserName"] AdornmentIcon="@Icons.Material.Filled.Person" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"]></MudTextField>

            <MudTextField @bind-Value="@newUserViewModel.Email" Label=@L["Email"] AdornmentIcon="@Icons.Material.Outlined.Email" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"] Type="mail"></MudTextField>

            <MudTextField @bind-Value="@newUserViewModel.Password" Label=@L["Password"] AdornmentIcon="@Icons.Material.Outlined.Lock" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"] InputType="InputType.Password"></MudTextField>

            <MudTextField @bind-Value="@newUserViewModel.ConfirmPassword" Label=@L["Password Confirmation"] AdornmentIcon="@Icons.Material.Outlined.Lock" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"] InputType="InputType.Password"></MudTextField>
        </EditForm>
    </DialogContent>
</MudDialog> *@

@* <MudDialog @bind-IsVisible="@editDialogOpen">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            @L["Edit {0}", currentUser.UserName]
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm id="updateUserForm" Model="@currentUser" OnValidSubmit="@UpdateUserAsync">
            <FluentValidationValidator />
            <MudValidationSummary />
            <MudTextField @bind-Value="@currentUser.UserName" Label=@L["UserName"] AdornmentIcon="@Icons.Material.Filled.Person" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"]></MudTextField>

            <MudTextField @bind-Value="@currentUser.Email" Label=@L["Email"] AdornmentIcon="@Icons.Material.Outlined.Email" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"] Type="mail"></MudTextField>

            <MudChipSet>
                @foreach (var role in roleSelections.OrderBy(x => x.DisplayValue))
                {
                    <MudChip Text="@role.DisplayValue" Icon="@((role.Selected) ? Icons.Material.Filled.Done : "")" @onclick="@(()=>UpdateUserRole(role))" />
                }
            </MudChipSet>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@CancelChanges">@L["Cancel"]</MudButton>
        <MudButton ButtonType="ButtonType.Submit" form="updateUserForm" Disabled="@disableUpdateUserButton" Variant="Variant.Filled" Color="Color.Primary">@L["Update"]</MudButton>
    </DialogActions>
</MudDialog> *@

<MudDialog @bind-IsVisible="@deleteUserDialogOpen" Style="z-index:100">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" />
            @L["Confirm Delete"]
        </MudText>
    </TitleContent>
    <DialogContent>
        @L["Are you sure you want to delete {0}?", currentUser.UserName]
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { deleteUserDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@DeleteUserAsync" Variant="Variant.Filled" Color="Color.Error">@L["Delete"]</MudButton>
    </DialogActions>
</MudDialog>

@* <MudDialog @bind-IsVisible="@changePasswordDialogOpen">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            @L["Change password for {0}", currentUser.UserName]
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm id="changePasswordForm" Model="@changePasswordViewModel" OnValidSubmit="@ResetUserPasswordAsync">
            <FluentValidationValidator />
            <MudValidationSummary />
            <MudTextField @bind-Value="@changePasswordViewModel.Password" Label=@L["Password"] AdornmentIcon="@Icons.Material.Outlined.Lock" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"] InputType="InputType.Password"></MudTextField>

            <MudTextField @bind-Value="@changePasswordViewModel.PasswordConfirm" Label=@L["Password Confirmation"] AdornmentIcon="@Icons.Material.Outlined.Lock" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"] InputType="InputType.Password"></MudTextField>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { changePasswordDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton ButtonType="ButtonType.Submit" form="changePasswordForm" Disabled="@disableChangePasswordButton" Variant="Variant.Filled" Color="Color.Primary">@L["Reset Password"]</MudButton>
    </DialogActions>
</MudDialog> *@

@code {
    private MudTable<UserViewModel> table;

    // [Inject] IViewNotifier viewNotifier { get; set; }
    // [Inject] AuthenticationStateProvider authStateProvider { get; set; }
    [Inject] AccountApiClient apiClient { get; set; }
    [Inject] protected IStringLocalizer<Localizer.Global> L { get; set; }

    private bool _loaded = false;
    protected IdentityAuthenticationStateProvider identityAuthenticationStateProvider;

    protected int pageSize { get; set; } = 10;
    private int pageIndex { get; set; } = 0;
    protected int totalItemsCount { get; set; } = 0;

    protected bool createUserDialogOpen = false;
    protected bool disableCreateUserButton = false;

    protected bool editDialogOpen = false;
    protected bool disableUpdateUserButton = false;

    protected bool deleteUserDialogOpen = false;

    protected bool changePasswordDialogOpen = false;
    protected bool disableChangePasswordButton = false;

    private List<BreadcrumbItem> _items { get; set; }

    protected List<UserViewModel> users { get; set; }
    protected List<SelectItem<Guid>> roleSelections { get; set; } = new();
    protected UserViewModel currentUser { get; set; } = new UserViewModel();
    protected RegisterViewModel newUserViewModel { get; set; } = new RegisterViewModel();
    protected ChangePasswordViewModel changePasswordViewModel { get; set; } = new ChangePasswordViewModel();

    // private ClaimP _currentUser;
    private bool _canCreateUsers;
    private bool _canSearchUsers;
    private bool _canExportUsers;
    private bool _canViewRoles;

    public string _searchString;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            identityAuthenticationStateProvider = (IdentityAuthenticationStateProvider)authStateProvider;

            var state = await identityAuthenticationStateProvider.GetAuthenticationStateAsync();

            _canCreateUsers = state.User.Claims.Where(x => x.Value == PermissionsWebApp.User.Create).FirstOrDefault() != null;
            // _canSearchUsers = (await _authorizationService.AuthorizeAsync(state.User, PermissionsWebApp.User.Search)).Succeeded;
            _canExportUsers = state.User.Claims.Where(x => x.Value == PermissionsWebApp.User.Export).FirstOrDefault() != null;
            _canViewRoles = state.User.Claims.Where(x => x.Value == PermissionsWebApp.Role.Read).FirstOrDefault() != null;
            _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("BreadCrumbAdmin", href: "/admin"),
            new BreadcrumbItem("BreadCrumbAdminUsers", href: "/admin/users")
        };

            await LoadUsers();
            // await LoadRoles();
        }
        finally
        {
            _loaded = true;
        };
    }

    private bool Search(UserViewModel user)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;
        if (user.FirstName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (user.LastName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (user.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (user.PhoneNumber?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (user.UserName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        return false;
    }

    protected async Task OnPage(int index, int size)
    {
        pageSize = size;
        pageIndex = index;

        await LoadUsers();
    }

    protected virtual async Task ReloadUser()
    {
        await LoadUsers();
    }
    protected async Task LoadUsers()
    {
        try
        {
            // apiClient.ClearEntitiesCache();
            var result = await apiClient.GetUsers(pageSize, pageIndex, "");
            users = result.Result;
            totalItemsCount = (int)result.Result.Count;

            viewNotifier.Show($"{totalItemsCount} items found", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    // protected async Task LoadRoles()
    // {
    //     try
    //     {
    //         var result = await apiClient.GetRoles(0, 0, "");

    //         foreach (var role in result.Result)
    //         {
    //             roleSelections.Add(new SelectItem<Guid>
    //                 {
    //                     Id = role.Id,
    //                     DisplayValue = role.Name,
    //                     Selected = false
    //                 });
    //         }

    //         // roleSelections = result.Select(i => new SelectItem<Guid>
    //         //     {
    //         //         Id = i.Id,
    //         //         DisplayValue = i.Name,
    //         //         Selected = false
    //         //     }).ToList();

    //     }
    //     catch (Exception ex)
    //     {
    //         viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
    //     }
    // }

    // protected void OpenEditDialog(UserViewModel user)
    // {
    //     currentUser = user;

    //     foreach (var role in roleSelections)
    //         role.Selected = user.UserRoles.Any(i => i.RoleId == role.Id);

    //     editDialogOpen = true;
    // }

    protected void OpenResetPasswordDialog(UserViewModel user)
    {
        currentUser = user;

        changePasswordViewModel = new ChangePasswordViewModel() { UserId = user.Id.ToString() };

        changePasswordDialogOpen = true;
    }

    protected void OpenDeleteDialog(UserViewModel user)
    {
        currentUser = user;
        deleteUserDialogOpen = true;
    }

    protected void UpdateUserRole(SelectItem<Guid> roleSelectionItem)
    {
        if (currentUser.UserName.ToLower() != DefaultUserNames.Administrator || roleSelectionItem.DisplayValue != DefaultRoleNames.Administrator)
            roleSelectionItem.Selected = !roleSelectionItem.Selected;
    }

    protected void CancelChanges()
    {
        editDialogOpen = false;
    }

    // protected async Task UpdateUserAsync()
    // {
    //     try
    //     {
    //         disableUpdateUserButton = true;

    //         var apiResponse = await identityAuthenticationStateProvider.AdminUpdateUser(currentUser);

    //         if (apiResponse.IsSuccessStatusCode)
    //         {
    //             viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success);
    //             await ReloadUser();
    //             editDialogOpen = false;
    //         }
    //         else
    //             viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["Operation Failed"]);
    //     }
    //     catch (Exception ex)
    //     {
    //         viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
    //     }
    //     finally
    //     {
    //         disableUpdateUserButton = false;
    //     }
    // }
    // protected async Task CreateUserAsync()
    // {
    //     try
    //     {
    //         disableCreateUserButton = true;

    //         var apiResponse = await identityAuthenticationStateProvider.CreateUser(newUserViewModel);

    //         if (apiResponse.IsSuccessStatusCode)
    //         {
    //             viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success);
    //             await ReloadUser();
    //             newUserViewModel = new RegisterViewModel();
    //             createUserDialogOpen = false;
    //         }
    //         else
    //             viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["UserCreationFailed"]);
    //     }
    //     catch (Exception ex)
    //     {
    //         viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["UserCreationFailed"]);
    //     }
    //     finally
    //     {
    //         disableCreateUserButton = false;
    //     }
    // }

    protected async Task ResetUserPasswordAsync()
    {
        try
        {
            disableChangePasswordButton = true;

            var apiResponse = await identityAuthenticationStateProvider.AdminChangePassword(changePasswordViewModel);

            if (apiResponse.IsSuccessStatusCode)
                viewNotifier.Show(L["Operation Successful"], ViewNotifierType.Success, apiResponse.Message);
            else
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error);

            changePasswordDialogOpen = false;
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["ResetPasswordFailed"]);
        }
        finally
        {
            disableChangePasswordButton = false;
        }
    }

    protected async Task DeleteUserAsync()
    {
        try
        {
            // apiClient.RemoveEntity(currentUser);
            viewNotifier.Show(L["Operation Successful"], ViewNotifierType.Success);
            deleteUserDialogOpen = false;
            await ReloadUser();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task<TableData<UserViewModel>> ServerReload(TableState state)
    {
        await OnPage(state.Page, state.PageSize);

        return new TableData<UserViewModel>() { TotalItems = totalItemsCount, Items = users };
    }

    private async Task InvokeModal()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<RegisterUser>("Create New User", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadUsers();
        }
    }

    private void ViewProfile(string userId)
    {
        _navigationManager.NavigateTo($"/admin/user-profile/{userId}");
    }

    private void ManageRoles(string userId, string userName)
    {
        if (!userName.Contains("admin")) viewNotifier.Show("Not Allowed.", ViewNotifierType.Error);
        else _navigationManager.NavigateTo($"/admin/user-roles/{userId}");
    }

    private async Task ExportToExcel()
    {
        // var base64 = await _userManager.ExportToExcelAsync(_searchString);
        // await _jsRuntime.InvokeVoidAsync("Download", new
        // {
        //     ByteArray = base64,
        //     FileName = $"{nameof(Users).ToLower()}_{DateTime.Now:ddMMyyyyHHmmss}.xlsx",
        //     MimeType = ApplicationConstants.MimeTypes.OpenXml
        // });
        // _snackBar.Add(string.IsNullOrWhiteSpace(_searchString)
        //     ? _localizer["Users exported"]
        //     : _localizer["Filtered Users exported"], Severity.Success);
    }
}
