@page "/admin/users"
@using Microsoft.AspNetCore.WebUtilities
@using WebApp.Components.Dialogs
@using WebApp.Constant
@attribute [Authorize]
@layout AdminMainLayout

<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

<MudBreadcrumbs Items="_items"></MudBreadcrumbs>

<PageTitle>Users</PageTitle>

@if (!_loaded)
{
    <LoadingBackground>
    </LoadingBackground>
}
else
{
    <MudTable @ref="table" ServerData="ServerReload" Hover="true" Elevation="25" HorizontalScrollbar="true" RowsPerPage="@pageSize" Items="users" FixedHeader="true" Dense="true" @bind-user="users">

        <ToolBarContent>
            <div class="justify-center mud-text-align-center">
                @if (_canCreateUsers)
                {
                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">

                        <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface">Register New User</MudButton>
                        <MudButton DisableElevation Variant="Variant.Filled" OnClick="Reload" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">Reload</MudButton>
                        @if (_canExportUsers)
                        {
                            <MudButton DisableElevation Variant="Variant.Filled" OnClick="ExportToExcel" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;">Export</MudButton>
                        }
                    </MudHidden>

                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudTooltip Text="Register New User">
                            <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface"></MudButton>
                        </MudTooltip>
                        <MudTooltip Text="Reload">
                            <MudButton DisableElevation Variant="Variant.Filled" OnClick="Reload" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary"></MudButton>
                        </MudTooltip>
                        @if (_canExportUsers)
                        {
                            <MudTooltip Text="Export">
                                <MudButton DisableElevation Variant="Variant.Filled" OnClick="ExportToExcel" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;"></MudButton>
                            </MudTooltip>
                        }
                    </MudHidden>
                }
                else
                {
                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                        <MudButton DisableElevation Variant="Variant.Filled" OnClick="Reload" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">Reload</MudButton>
                        @if (_canExportUsers)
                        {
                            <MudButton DisableElevation Variant="Variant.Filled" OnClick="ExportToExcel" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;">Export</MudButton>
                        }
                    </MudHidden>

                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudTooltip Text="Reload">
                            <MudButton DisableElevation Variant="Variant.Filled" OnClick="Reload" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary"></MudButton>
                        </MudTooltip>
                        @if (_canExportUsers)
                        {
                            <MudTooltip Text="Export">
                                <MudButton DisableElevation Variant="Variant.Filled" OnClick="ExportToExcel" StartIcon="@Icons.Custom.FileFormats.FileExcel" IconColor="Color.Secondary" Color="Color.Surface" Style="margin-left: 5px;"></MudButton>
                            </MudTooltip>
                        }
                    </MudHidden>
                }
            </div>
            <MudSpacer />
            @*  <MudTextField @bind-Value="_searchString" Immediate="true" FullWidth=false Placeholder="Search For Users" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField> *@
        </ToolBarContent>

        <HeaderContent>
            <MudTh>Actions</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserDataViewModel, object>(x => x.FirstName)">First Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserDataViewModel, object>(x => x.LastName)">Last Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserDataViewModel, object>(x => x.UserName)">UserName</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserDataViewModel, object>(x => x.Email)">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserDataViewModel, object>(x => x.PhoneNumber)">PhoneNumber</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserDataViewModel, object>(x => x.EmailConfirmed)">Email Confirmation</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<UserDataViewModel, object>(x => x.IsActive)">Active</MudTableSortLabel></MudTh>

        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Actions">
                <MudMenu Label="Actions" Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Secondary">
                    <MudMenuItem OnClick="(()=>ViewProfile(context.Id.ToString()))">View Profile</MudMenuItem>
                    @if (_canViewRoles)
                    {
                        <MudMenuItem OnClick="(()=>ManageRoles(context.Id.ToString(), context.UserName))">Manage Roles</MudMenuItem>
                    }
                    @if (_canDeleteRoles)
                    {
                        <MudMenuItem @onclick="@(() => Delete(@context.Id.ToString()))">Delete</MudMenuItem>
                    }
                </MudMenu>
            </MudTd>
            <MudTd DataLabel="FirstName">
                <MudHighlighter Text="@context.FirstName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="LastName">
                <MudHighlighter Text="@context.LastName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="UserName">
                <MudHighlighter Text="@context.UserName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Email">
                <MudHighlighter Text="@context.Email" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="PhoneNumber">
                <MudHighlighter Text="@context.PhoneNumber" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="EmailConfirmed"><MudCheckBox T="bool" @bind-Checked="@context.EmailConfirmed" ReadOnly Color="Color.Secondary"></MudCheckBox></MudTd>
            <MudTd DataLabel="Active"><MudCheckBox T="bool" @bind-Checked="@context.IsActive" ReadOnly Color="Color.Secondary"></MudCheckBox></MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager HorizontalAlignment="HorizontalAlignment.Left" PageSizeOptions="@TablePageConstant.RowPerPage" RowsPerPageString="Rows per page" />
        </PagerContent>
    </MudTable>
}
@code {
    private MudTable<UserDataViewModel> table;

    [Inject] AccountApiClient apiClient { get; set; }
    [Inject] protected IStringLocalizer<Localizer.Global> L { get; set; }

    private bool _loaded = false;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    public int pageSize { get; set; } = 1;

    public int pageIndex { get; set; } = 0;

    protected int totalItemsCount { get; set; } = 0;

    private List<BreadcrumbItem> _items { get; set; }

    protected List<UserDataViewModel> users { get; set; }
    protected List<SelectItem<Guid>> roleSelections { get; set; } = new();
    protected UserDataViewModel currentUser { get; set; } = new UserDataViewModel();
    protected RegisterViewModel newUserViewModel { get; set; } = new RegisterViewModel();
    protected ChangePasswordViewModel changePasswordViewModel { get; set; } = new ChangePasswordViewModel();

    private bool _canCreateUsers;
    private bool _canSearchUsers;
    private bool _canExportUsers;
    private bool _canViewRoles;
    private bool _canDeleteRoles;

    public string _searchString;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = (await authenticationStateTask).User;

            var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri); //you can use IURIHelper for older versions

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageSize", out var pageSizeData))
            {
                pageSize = Convert.ToInt16(pageSizeData.First());
            }

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageIndex", out var pageIndexData))
            {
                pageIndex = Convert.ToInt16(pageIndexData.First());
            }

            _canCreateUsers = user.Claims.Where(x => x.Value == PermissionsWebApp.User.Create).FirstOrDefault() != null;
            // _canSearchUsers = (await _authorizationService.AuthorizeAsync(state.User, PermissionsWebApp.User.Search)).Succeeded;
            _canExportUsers = user.Claims.Where(x => x.Value == PermissionsWebApp.User.Export).FirstOrDefault() != null;
            _canViewRoles = user.Claims.Where(x => x.Value == PermissionsWebApp.Role.Read).FirstOrDefault() != null;

            _canDeleteRoles = user.Claims.Where(x => x.Value == PermissionsWebApp.Role.Delete).FirstOrDefault() != null;
            _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("BreadCrumbAdmin", href: "/admin"),
            new BreadcrumbItem("BreadCrumbAdminUsers", href: "/admin/users")
        };

            await LoadUsers();
            // await LoadRoles();
        }
        finally
        {
            _loaded = true;
        };
    }

    // private bool Search(UserDataViewModel user)
    // {
    //     if (string.IsNullOrWhiteSpace(_searchString)) return true;
    //     if (user.FirstName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
    //     {
    //         return true;
    //     }
    //     if (user.LastName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
    //     {
    //         return true;
    //     }
    //     if (user.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
    //     {
    //         return true;
    //     }
    //     if (user.PhoneNumber?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
    //     {
    //         return true;
    //     }
    //     if (user.UserName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
    //     {
    //         return true;
    //     }
    //     return false;
    // }

    private async Task Delete(string id)
    {
        string deleteContent = "Delete Content";
        var parameters = new DialogParameters
            {
                {nameof(DeleteConfirmation.ContentText), string.Format(deleteContent, id)}
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackdropClick = true };
        var dialog = _dialogService.Show<DeleteConfirmation>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var response = await _accountApiClient.DeleteUser(id);
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
                // await HubConnection.SendAsync(ApplicationConstants.SignalR.SendUpdateDashboard);
                viewNotifier.Show(response.Message, ViewNotifierType.Success);
            }
            else
            {
                await LoadUsers();

                viewNotifier.Show(response.Message, ViewNotifierType.Error);

                // foreach (var message in response.Messages)
                // {
                //     viewNotifier.Add(message, Severity.Error);
                // }
            }
        }
    }

    protected async Task LoadUsers()
    {
        try
        {
            _loaded = false;

            var result = await apiClient.GetUsers(pageSize, pageIndex, "");
            users = result.Result;
            totalItemsCount = (int)result.Count;

            viewNotifier.Show($"{result.Result.Count} items found", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task<TableData<UserDataViewModel>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        await OnPage(state.Page, state.PageSize);

        return new TableData<UserDataViewModel>() { TotalItems = totalItemsCount, Items = users };
    }

    protected async Task OnPage(int index, int size)
    {
        pageSize = size;
        pageIndex = index;

        await LoadUsers();
    }

    private async Task InvokeModal()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackdropClick = true };
        var dialog = _dialogService.Show<RegisterUser>("Create New User", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadUsers();
        }
    }

    private void ViewProfile(string userId)
    {
        _navigationManager.NavigateTo($"/admin/user-profile/{userId}");
    }

    protected async Task Reload()
    {
        await table.ReloadServerData();
    }

    private void ManageRoles(string userId, string userName)
    {
        _navigationManager.NavigateTo($"/admin/user-roles/{userId}");
    }

    private async Task ExportToExcel()
    {
        // var base64 = await _userManager.ExportToExcelAsync(_searchString);
        // await _jsRuntime.InvokeVoidAsync("Download", new
        // {
        //     ByteArray = base64,
        //     FileName = $"{nameof(Users).ToLower()}_{DateTime.Now:ddMMyyyyHHmmss}.xlsx",
        //     MimeType = ApplicationConstants.MimeTypes.OpenXml
        // });
        // _snackBar.Add(string.IsNullOrWhiteSpace(_searchString)
        //     ? _localizer["Users exported"]
        //     : _localizer["Filtered Users exported"], Severity.Success);
    }
}
