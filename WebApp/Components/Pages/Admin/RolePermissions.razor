@page "/admin/role-permissions/{Id}"
@layout AdminMainLayout

<PageTitle>Manage Permission</PageTitle>
@* @if (!_loaded)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTabs Elevation="25" Rounded="true" Centered="true" ApplyEffectsToContainer="true" AlwaysShowScrollButtons="true">
        @foreach (var group in GroupedRoleClaims.Keys)
        {
            var selectedRoleClaimsInGroup = GroupedRoleClaims[group].Where(c => c.Selected).ToList();
            var allRoleClaimsInGroup = GroupedRoleClaims[group].ToList();

            <MudTabPanel Text="@group" BadgeData="@($"{selectedRoleClaimsInGroup.Count}/{allRoleClaimsInGroup.Count}")" Style="padding-right: 43px;" BadgeColor="@GetGroupBadgeColor(selectedRoleClaimsInGroup.Count, allRoleClaimsInGroup.Count)">
                <MudTable Hover="true" Elevation="25" Items="@allRoleClaimsInGroup" Dense="true" Bordered="true" Striped="true" Filter="new Func<RoleClaimModel, bool>(Search)" @bind-roleClaims="_roleClaims" CommitEditTooltip="Apply" @bind-SelectedItem="_selectedItem">
                    <ToolBarContent>
                        @if (_canEditRolePermissions)
                        {
                            <div class="justify-center mud-text-align-center">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="SaveAsync" ButtonType="ButtonType.Submit">Update Role Permissions</MudButton>
                            </div>
                        }
                        <MudSpacer />
                        @if (_canSearchRolePermissions)
                        {
                            <MudTextField @bind-Value="_searchString" Immediate="true" FullWidth=false Placeholder="Search For Permissions" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
                        }
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<RoleClaimModel, object>(x => x.Type)">Type</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RoleClaimModel, object>(x => x.Value)">Permission Name</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RoleClaimModel, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<RoleClaimModel, object>(x => x.Selected)">Status</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Type">@context.Type</MudTd>
                        <MudTd DataLabel="Permission Name">
                            <MudHighlighter Text="@context.Value" HighlightedText="@_searchString" />
                        </MudTd>
                        <MudTd DataLabel="Description">
                            <MudHighlighter Text="@context.Description" HighlightedText="@_searchString" />
                        </MudTd>
                        <MudTd DataLabel="Status"><MudCheckBox T="bool" @bind-Checked="@context.Selected" Disabled="@(!_canEditRolePermissions)" Color="Color.Secondary" /></MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Type">@context.Type</MudTd>
                        <MudTd DataLabel="Permission Name">@context.Value</MudTd>
                        <MudTd DataLabel="Description">
                            @if (_canEditRolePermissions)
                            {

                              
                            }
                            else
                            {
                                @context.Description
                            }
                        </MudTd>
                        <MudTd DataLabel="Status"><MudCheckBox T="bool" @bind-Checked="@context.Selected" Disabled="@(!_canEditRolePermissions)" Color="Color.Secondary" /></MudTd>
                    </RowEditingTemplate>
                </MudTable>
            </MudTabPanel>
        }
    </MudTabs>
}
 *@
@code {
    // [Inject] private IRoleManager RoleManager { get; set; }

    // [CascadingParameter] private HubConnection HubConnection { get; set; }
    [Parameter] public string Id { get; set; }
    // [Parameter] public string Title { get; set; }
    // [Parameter] public string Description { get; set; }

    private PermissionModel _model;
    private Dictionary<string, List<RoleClaimModel>> GroupedRoleClaims { get; } = new();
    private RoleClaimModel _roleClaims = new();
    private RoleClaimModel _selectedItem = new();
    private string _searchString = "";

    private bool _canEditRolePermissions;
    private bool _canSearchRolePermissions;
    private bool _loaded;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {

        // identityAuthenticationStateProvider = (IdentityAuthenticationStateProvider)authStateProvider;

        var user = (await authenticationStateTask).User;

        //state.User.Claims.Where(x => x.Value == PermissionsWebApp.Role.Update).FirstOrDefault() != null;
        // _canEditRolePermissions = (await _authorizationService.AuthorizeAsync(state.User, PermissionsWebApp.RoleClaims.Edit)).Succeeded;
        // _canSearchRolePermissions = (await _authorizationService.AuthorizeAsync(state.User, PermissionsWebApp.RoleClaims.Search)).Succeeded;

        _canEditRolePermissions = user.Claims.Where(x => x.Value == PermissionsWebApp.RoleClaims.Edit).FirstOrDefault() != null;
        _canSearchRolePermissions = user.Claims.Where(x => x.Value == PermissionsWebApp.RoleClaims.Search).FirstOrDefault() != null;

        await GetRolePermissionsAsync();
        _loaded = true;
        // HubConnection = HubConnection.TryInitialize(_navigationManager, _localStorage);
        // if (HubConnection.State == HubConnectionState.Disconnected)
        // {
        //     await HubConnection.StartAsync();
        // }
    }

    private async Task GetRolePermissionsAsync()
    {
        // _mapper = new MapperConfiguration(c => { c.AddProfile<RoleProfile>(); }).CreateMapper();
        var roleId = Id;
        var result = await _accountApiClient.GetAllByRoleIdAsync(roleId);
        if (result.IsSuccessStatusCode)
        {
            _model = result.Result;
            GroupedRoleClaims.Add("All Permissions", _model.RoleClaims);
            foreach (var claim in _model.RoleClaims)
            {
                if (GroupedRoleClaims.ContainsKey(claim.Group))
                {
                    GroupedRoleClaims[claim.Group].Add(claim);
                }
                else
                {
                    GroupedRoleClaims.Add(claim.Group, new List<RoleClaimModel> { claim });
                }
            }
            // if (_model != null)
            // {
            //     Description = string.Format(["Manage {0} {1}'s Permissions"], _model.RoleId, _model.RoleName);
            // }
        }
        else
        {
            // viewNotifier.Show(result.Message, ViewNotifierType.Error);

            _navigationManager.NavigateTo("/identity/roles");
        }
    }

    private async Task SaveAsync()
    {
        // var request = _mapper.Map<PermissionResponse, PermissionRequest>(_model);
        // var result = await _accountApiClient.UpdatePermissionsAsync(request);
        // if (result.Succeeded)
        // {
        //     viewNotifier.Show(result.Message, Severity.Success);
        //     // await HubConnection.SendAsync(ApplicationConstants.SignalR.SendRegenerateTokens);
        //     // await HubConnection.SendAsync(ApplicationConstants.SignalR.OnChangeRolePermissions, _currentUser.GetUserId(), request.RoleId);
        //     _navigationManager.NavigateTo("/admin/roles");
        // }
        // else
        // {
        //     viewNotifier.Show(result.Message, Severity.Error);

        //     // foreach (var error in result.Messages)
        //     // {
        //     //     _snackBar.Add(error, Severity.Error);
        //     // }
        // }
    }

    private bool Search(RoleClaimModel roleClaims)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;
        if (roleClaims.Value?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (roleClaims.Description?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        return false;
    }

    // private Color GetGroupBadgeColor(int selected, int all)
    // {
    //     if (selected == 0)
    //         return Color.Error;

    //     if (selected == all)
    //         return Color.Success;

    //     return Color.Info;
    // }
}