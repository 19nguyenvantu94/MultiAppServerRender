@using Microsoft.AspNetCore.Components;
@using MultiAppServer.ServiceDefaults
@using System.Security.Claims
@using WebApp.Constant
@inject HttpClient Http
@inject IStringLocalizer<Localizer.Global> L

<MudNavMenu Style="flex: 1">
    @*    <MudNavLink Href="@_navigationManager.ToAbsoluteUri("").AbsoluteUri" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
    Frontend
    </MudNavLink> *@

    <MudNavLink Href="@_navigationManager.ToAbsoluteUri("").AbsoluteUri" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.BarChart">
        @L["Dashboard"]
    </MudNavLink>
    <MudNavGroup Title="@L["Settings"]">
        <MudNavLink Href="@_navigationManager.ToAbsoluteUri($"admin/settings?pageSize={TablePageConstant.PageSize}&pageIndex={TablePageConstant.PageIndex}").AbsoluteUri" Icon="@Icons.Material.Filled.SettingsApplications">
            @L["MainSettings"]
        </MudNavLink>
        <MudNavLink Href="@_navigationManager.ToAbsoluteUri($"admin/settings/email?pageSize={TablePageConstant.PageSize}&pageIndex={TablePageConstant.PageIndex}").AbsoluteUri" Icon="@Icons.Material.Filled.Email">
            @L["Email"]
        </MudNavLink>
    </MudNavGroup>
    @if (_canViewUsers)
    {
        <MudNavLink Href="@_navigationManager.ToAbsoluteUri($"admin/users?pageSize={TablePageConstant.PageSize}&pageIndex={TablePageConstant.PageIndex}").AbsoluteUri" Icon="@Icons.Material.Filled.SupervisorAccount">
            @L["Users"]
        </MudNavLink>
    }

    @if (_canViewRoles)
    {
        <MudNavLink Href="@_navigationManager.ToAbsoluteUri($"admin/roles?pageSize={TablePageConstant.PageSize}&pageIndex={TablePageConstant.PageIndex}").AbsoluteUri" Icon="@Icons.Material.Filled.SupervisorAccount">
            @L["Roles"]
        </MudNavLink>
    }
    @if (_canViewTenant)
    {
        <MudNavLink Href="@_navigationManager.ToAbsoluteUri($"admin/multitenancy?pageSize={TablePageConstant.PageSize}&pageIndex={TablePageConstant.PageIndex}").AbsoluteUri" Icon="@Icons.Material.Filled.AccountBalance">
            @L["MultiTenancy"]
        </MudNavLink>
    }
    <MudNavGroup Title="@L["AppAdminNavMonitoring"]">
        <MudNavLink Href="@_navigationManager.ToAbsoluteUri($"admin/apilog?pageSize={TablePageConstant.PageSize}&pageIndex={TablePageConstant.PageIndex}").AbsoluteUri" Icon="@Icons.Material.Filled.ChangeHistory">
            @L["AppAdminNavApiAuditLog"]
        </MudNavLink>
        <MudNavLink Href="@_navigationManager.ToAbsoluteUri($"admin/dblog?pageSize={TablePageConstant.PageSize}&pageIndex={TablePageConstant.PageIndex}").AbsoluteUri" Icon="@Icons.Material.Filled.Notes">
            @L["AppAdminNavDBLoggingView"]
        </MudNavLink>
    </MudNavGroup>
</MudNavMenu>

@code {
    TenantModel tenant = new TenantModel();

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject] protected AccountApiClient accountApiClient { get; set; }

    private bool _canViewUsers = true;
    private bool _canViewRoles = true;

    private bool _canViewTenant = true;

    protected override async Task OnParametersSetAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user!.Identity!.IsAuthenticated)
        {

            _canViewRoles = user.Claims.Where(x => x.Value == PermissionsWebApp.Role.Read).FirstOrDefault() != null;

            _canViewUsers = user.Claims.Where(x => x.Value == PermissionsWebApp.User.Read).FirstOrDefault() != null;

            _canViewTenant = user.Claims.Where(x => x.Value == PermissionsWebApp.Tenant.Read).FirstOrDefault() != null;

            // var apiResponse = await accountApiClient.GetTenant();
            // if (apiResponse.StatusCode == 200)
            // {
            //     tenant = apiResponse.Result;
            // }
        }
    }
}
