@page "/admin/settings"
@using WebApp.Constant
@using WebApp.Settings
@layout AdminMainLayout

<TopSection>
    <Breadcrumbs>
        <Breadcrumb Link="/admin" Title=@L["BreadCrumbadmin"] />
        <Breadcrumb Title=@L["BreadCrumbadminsettings"] />
    </Breadcrumbs>
</TopSection>

<PageTitle>@L["MainSettings"]</PageTitle>

@if (settings == null)
{
    <LoadingBackground>
        <label>@L["Loading"]</label>
    </LoadingBackground>
}
else
{
    <EditForm Model="@settings" class="mb-4">
        <FluentValidationValidator />
        <MudValidationSummary />
        <MudSelect @bind-Value="@settings[SettingKey.MainConfiguration_Runtime].Value" Label="@L["Blazor Runtime"]">
            @foreach (var item in BlazorRuntimes)
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
    </EditForm>

    @*     <MudButton OnClick="@(()=> ())">@L["Cancel"]</MudButton>
 *@    <MudButton OnClick="@SaveChanges" Variant="Variant.Filled" Color="Color.Primary">@L["Save"]</MudButton>
}

@code {

    protected Dictionary<SettingKey, TenantSettingModels> settings;

    // [Inject] private NavigationManager navigationManager { get; set; }

    [Inject] protected IApiClient apiClient { get; set; }

    [Inject] protected IAccountApiClient accountApiClient { get; set; }


    // [Inject] protected IViewNotifier viewNotifier { get; set; }

    [Inject] protected IStringLocalizer<Localizer.Global> L { get; set; }

    protected async Task LoadSettings(string prefix)
    {
        try
        {
            var result = (await accountApiClient.GetTenantSettings()).Where(i => i.Key.ToString().StartsWith(prefix)).ToDictionary(i => i.Key, i => i);

            foreach (var def in TenantSettingValues.Default.Where(i => i.Key.ToString().StartsWith(prefix)))
            {
                if (!result.ContainsKey(def.Key))
                {
                    var entity = new TenantSettingModels() { Key = def.Key, Type = def.Value.Item2, Value = def.Value.Item1 };
                    result.Add(def.Key, entity);
                    apiClient.AddEntity(entity);
                }
            }

            settings = result;
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    protected async Task SaveChanges()
    {
        try
        {
            var reload = false;

            if (settings.ContainsKey(SettingKey.MainConfiguration_Runtime) && settings[SettingKey.MainConfiguration_Runtime].EntityAspect.HasChanges())
                reload = true;

            await apiClient.SaveChanges();

            viewNotifier.Show(L["Operation Successful"], ViewNotifierType.Success);

            if (reload)
                _navigationManager.NavigateTo(_navigationManager.Uri, true);

        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    public void Dispose()
    {
        // apiClient.CancelChanges();
    }

    protected string[] BlazorRuntimes { get; set; } = ((BlazorRuntime[])Enum.GetValues(typeof(BlazorRuntime))).Select(i => i.ToString()).ToArray();

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings("MainConfiguration_");
    }
}
