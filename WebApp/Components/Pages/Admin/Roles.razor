@page "/admin/roles"
@using MultiAppServer.ServiceDefaults
@attribute [Authorize(Policies.IsAdmin)]
@layout AdminMainLayout

<MudBreadcrumbs Items="_items"></MudBreadcrumbs>

<PageTitle>Roles</PageTitle>

@if (!_loaded)
{
    <LoadingBackground>
    </LoadingBackground>
}
else
{
    <MudTable Items="@roles" Striped="true" Bordered="true" Dense="true" Hover="true" Elevation="2">
        <HeaderContent>
            <MudTh><MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => OpenUpsertRoleDialog())" Variant="Variant.Filled" Color="Color.Primary">@L["New Role"]</MudButton></MudTh>
            <MudTh>@L["Name"]</MudTh>
            <MudTh>@L["Permissions"]</MudTh>
        </HeaderContent>
        <RowTemplate Context="RoleRow">
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenUpsertRoleDialog(@RoleRow.Name))" Disabled="@(RoleRow.Name == DefaultUserNames.Administrator)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => OpenDeleteDialog(@RoleRow.Name))" Disabled="@(RoleRow.Name == DefaultUserNames.Administrator)" />
            </MudTd>
            <MudTd><div style="width:130px;">@RoleRow.Name</div></MudTd>
            <MudTd>
                <MudChipSet>
                    @foreach (var permission in @RoleRow.Permissions)
                    {
                        <MudChip Text="@permission"></MudChip>
                    }
                </MudChipSet>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

<MudDialog @bind-IsVisible="@isUpsertRoleDialogOpen">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            @labelUpsertDialogTitle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@currentRoleName" Disabled="@isCurrentRoleReadOnly" Label="Role Name" AdornmentIcon="@Icons.Material.Filled.Add" Adornment="Adornment.End" FullWidth="true" Required="true" RequiredError=@L["Required"]></MudTextField>

        <MudTable Items="@permissionsSelections" Class="mt-4">
            <HeaderContent>
                <MudTh>@L["Permissions"]</MudTh>
                <MudTh>@L["Allow"]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.DisplayValue</MudTd>
                <MudTd><MudCheckBox @bind-Checked="@context.Selected"></MudCheckBox></MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager RowsPerPageString=@L["Rows per page"] />
            </PagerContent>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { isUpsertRoleDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@UpsertRole" Variant="Variant.Filled" Color="Color.Primary">@labelUpsertDialogOkButton</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="@isDeleteRoleDialogOpen" Style="z-index:100">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" />
            @L["Confirm Delete"]
        </MudText>
    </TitleContent>
    <DialogContent>
        @L["Are you sure you want to delete {0}?", currentRoleName]
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { isDeleteRoleDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@DeleteRoleAsync" Variant="Variant.Filled" Color="Color.Error">@L["Delete"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] AccountApiClient accountApiClient { get; set; }
    // [Inject] IViewNotifier viewNotifier { get; set; }
    [Inject] protected IStringLocalizer<Localizer.Global> L { get; set; }
    protected int pageSize { get; set; } = 15;
    protected int currentPage { get; set; } = 0;

    protected string currentRoleName = string.Empty;
    protected bool isCurrentRoleReadOnly = false;
    private List<BreadcrumbItem>
        _items = new List<BreadcrumbItem>
                            {
        new BreadcrumbItem("BreadCrumbAdmin", href: "/admin"),
        new BreadcrumbItem("BreadCrumbAdminRoles", href: "/admin/roles")
                            };
    protected List<RoleDto> roles;
    private bool _loaded = false;

    #region OnInitializedAsync

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InitializeRolesListAsync();

        }
        finally
        {
            _loaded = true;
        }
    }

    public async Task InitializeRolesListAsync()
    {
        try
        {
            var apiResponse = await accountApiClient.GetRoles(pageSize, currentPage, "");

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                roles = apiResponse.Result;
            }
            else
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    #endregion

    #region OpenUpsertRoleDialog

    protected bool isUpsertRoleDialogOpen = false;
    protected bool isInsertOperation;
    protected List<SelectItem<string>> permissionsSelections = new();

    protected string labelUpsertDialogTitle;
    protected string labelUpsertDialogOkButton;

    protected async Task OpenUpsertRoleDialog(string roleName = "")
    {
        try
        {
            currentRoleName = roleName;

            isInsertOperation = string.IsNullOrWhiteSpace(roleName);

            if (isInsertOperation)
            {
                labelUpsertDialogTitle = L["New Role"];
                labelUpsertDialogOkButton = L["Create"];
            }
            else
            {
                labelUpsertDialogTitle = L["Edit {0}", roleName];
                labelUpsertDialogOkButton = L["Update"];
            }

            RoleDto role = null;
            isCurrentRoleReadOnly = !isInsertOperation;

            if (isCurrentRoleReadOnly)
            {
                var roleResponse = await accountApiClient.GetRoleByName(roleName);
                role = roleResponse.Result;
            }

            var response = await accountApiClient.GetAllPermissions();
            permissionsSelections.Clear();


            foreach (var name in response.Result)
                permissionsSelections.Add(new SelectItem<string>
                    {
                        Id = name,
                        DisplayValue = name,
                        Selected = role != null && role.Permissions.Contains(name)
                    });

            isUpsertRoleDialogOpen = true;
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    protected async Task UpsertRole()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(currentRoleName))
            {
                viewNotifier.Show("Role Creation Error", ViewNotifierType.Error, "Enter in a Role Name");
                return;
            }

            RoleDto request = new()
                {
                    Name = currentRoleName,
                    Permissions = permissionsSelections.Where(i => i.Selected).Select(i => i.Id).ToList()
                };

            ApiResponseDto apiResponse;

            if (isInsertOperation)
                apiResponse = await accountApiClient.UpdateRole(request);
            else
                apiResponse = await accountApiClient.CreateRole(request);

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success);

                StateHasChanged();
            }
            else
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error);


            // this.StateHasChanged();
            await OnInitializedAsync();

            isUpsertRoleDialogOpen = false;
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    #endregion

    #region OpenDeleteDialog

    protected bool isDeleteRoleDialogOpen = false;

    protected void OpenDeleteDialog(string roleName)
    {
        currentRoleName = roleName;
        isDeleteRoleDialogOpen = true;
    }

    protected async Task DeleteRoleAsync()
    {
        try
        {
            var response = await accountApiClient.DeleteRole(currentRoleName);

            if (response.IsSuccessStatusCode)
            {
                viewNotifier.Show(L["Operation Successful"], ViewNotifierType.Success);
                await OnInitializedAsync();
                isDeleteRoleDialogOpen = false;
                StateHasChanged();
            }
            else
                viewNotifier.Show(L["Operation Failed"], ViewNotifierType.Error);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    #endregion
}
