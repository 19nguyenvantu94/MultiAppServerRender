@page "/admin/roles"
@using MultiAppServer.ServiceDefaults
@using WebApp.Components.Dialogs
@using WebApp.Constant
@attribute [Authorize]
@layout AdminMainLayout

<style>
    .mud-table-container {
        overflow: auto;
    }
</style>


<MudBreadcrumbs Items="_items"></MudBreadcrumbs>

<PageTitle>Manage Roles</PageTitle>

@if (!_loaded)
{
    <LoadingBackground>
    </LoadingBackground>
}
else
{
    @*  @ref
= "table" ServerData = "ServerReload" Hover = "true" Elevation = "25" HorizontalScrollbar = "true" RowsPerPage = "@pageSize" Items = "users" FixedHeader = "true" Dense = "true" @bind - user = "users" *@

    <MudTable @ref="table" Hover="true" Striped="true" Elevation="25" FixedHeader="true" LoadingProgressColor="Color.Info" HorizontalScrollbar="true" RowsPerPage="@pageSize" Items="rolesList" ServerData="ServerReload">

        <ToolBarContent>
            <div class="justify-center mud-text-align-center">
                @if (_canCreateRoles)
                {
                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">

                        <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface">Add New Role</MudButton>
                        <MudButton DisableElevation Variant="Variant.Filled" OnClick="InitializeRolesListAsync" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">Reload</MudButton>
                    </MudHidden>

                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudTooltip Text="Add new Role">
                            <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface"></MudButton>
                        </MudTooltip>
                        <MudTooltip Text="Reload">
                            <MudButton DisableElevation Variant="Variant.Filled" OnClick="InitializeRolesListAsync" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary"></MudButton>
                        </MudTooltip>
                    </MudHidden>
                }
                else
                {
                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                        <MudButton DisableElevation Variant="Variant.Filled" OnClick="InitializeRolesListAsync" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">Reload</MudButton>
                    </MudHidden>

                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudTooltip Text="Reload">
                            <MudButton DisableElevation Variant="Variant.Filled" OnClick="InitializeRolesListAsync" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary"></MudButton>
                        </MudTooltip>
                    </MudHidden>
                }
            </div>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Immediate="true" FullWidth=false Placeholder="Search For Role Name" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
        </ToolBarContent>

        <HeaderContent>

            <MudTh>Actions</MudTh>
            <MudTh>Role Name</MudTh>
            <MudTh>Description</MudTh>

        </HeaderContent>

        <RowTemplate>
            @*             <MudTd DataLabel="Id">@context.Id.ToString()</MudTd>

        *@             <MudTd DataLabel="Actions">
                @if (_canViewRoleClaims || _canEditRoles || _canDeleteRoles)
                {
                    <MudMenu Label="Actions" Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Secondary" AnchorOrigin="Origin.CenterLeft">
                        @if (_canViewRoleClaims)
                        {
                            <MudMenuItem @onclick="@(() => ManagePermissions(@context.Id.ToString()))">Manage Permission</MudMenuItem>
                        }
                        @if (_canEditRoles)
                        {
                            <MudMenuItem @onclick="@(() => InvokeModal(@context.Id.ToString()))">Edit</MudMenuItem>
                        }
                        @if (_canDeleteRoles)
                        {
                            <MudMenuItem @onclick="@(() => Delete(@context.Id.ToString()))">Delete</MudMenuItem>
                        }
                    </MudMenu>
                }
                else
                {
                    <MudButton Variant="Variant.Filled"
                               DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch"
                               IconColor="Color.Secondary"
                               Size="Size.Small"
                               Color="Color.Surface">
                        No Allowed Actions
                    </MudButton>
                }
            </MudTd>
            <MudTd DataLabel="Role">
                <MudHighlighter Text="@context.Name" HighlightedText="@_searchString" />
            </MudTd>

            <MudTd DataLabel="Role">
                <MudHighlighter Text="@context.Description" HighlightedText="@_searchString" />
            </MudTd>
        </RowTemplate>

        @*       <FooterContent>
    <MudTh><MudTableSortLabel SortBy="new Func<RoleDto, object>(x => x.Name)">Role Name</MudTableSortLabel></MudTh>
    <MudTh><MudTableSortLabel SortBy="new Func<RoleDto, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
    </FooterContent> *@

        <PagerContent>
            <MudTablePager HorizontalAlignment="HorizontalAlignment.Left" PageSizeOptions="@TablePageConstant.RowPerPage" RowsPerPageString="Rows per page" />
        </PagerContent>
    </MudTable>
}

<MudDialog @bind-IsVisible="@isDeleteRoleDialogOpen" Style="z-index:100">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" />
            @L["Confirm Delete"]
        </MudText>
    </TitleContent>
    <DialogContent>
        @L["Are you sure you want to delete {0}?", currentRoleName]
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { isDeleteRoleDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@DeleteRoleAsync" Variant="Variant.Filled" Color="Color.Error">@L["Delete"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] AccountApiClient accountApiClient { get; set; }
    // [Inject] IViewNotifier viewNotifier { get; set; }
    [Inject] protected IStringLocalizer<Localizer.Global> L { get; set; }
    protected int pageSize { get; set; } = 10;
    protected int pageIndex { get; set; } = 0;

    protected string currentRoleName = string.Empty;
    protected bool isCurrentRoleReadOnly = false;

    private string _searchString = "";

    private bool _canCreateRoles;
    private bool _canEditRoles;
    private bool _canDeleteRoles;
    private bool _canViewRoleClaims;

    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<BreadcrumbItem>
        _items = new List<BreadcrumbItem> { new BreadcrumbItem("BreadCrumbAdmin", href: "/admin"), new BreadcrumbItem("BreadCrumbAdminRoles", href: "/admin/roles") };
    protected List<RoleDto> rolesList;

    private MudTable<RoleDto> table;
    private int totalItemsCount { get; set; } = 0;

    protected RoleDto role;
    private bool _loaded = false;

    #region OnInitializedAsync

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var user = (await authenticationStateTask).User;


            _canCreateRoles = user.Claims.Where(x => x.Value == PermissionsWebApp.Role.Create).FirstOrDefault() != null;
            // _canSearchUsers = (await _authorizationService.AuthorizeAsync(state.User, PermissionsWebApp.User.Search)).Succeeded;
            _canEditRoles = user.Claims.Where(x => x.Value == PermissionsWebApp.Role.Update).FirstOrDefault() != null;
            _canDeleteRoles = user.Claims.Where(x => x.Value == PermissionsWebApp.Role.Delete).FirstOrDefault() != null;
            // _canSearchRoles = state.User.Claims.Where(x => x.Value == PermissionsWebApp.Role.View).FirstOrDefault() != null;
            _canViewRoleClaims = user.Claims.Where(x => x.Value == PermissionsWebApp.RoleClaims.View).FirstOrDefault() != null;

            await InitializeRolesListAsync();

        }
        finally
        {
            _loaded = true;
        }
    }

    public async Task InitializeRolesListAsync()
    {
        try
        {
            var apiResponse = await accountApiClient.GetRoles(pageSize, pageIndex, "");

            if (apiResponse.IsSuccessStatusCode)
            {
                rolesList = apiResponse.Result;
                totalItemsCount = apiResponse.Count;
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);

            }
            else
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    #endregion
    #region OpenDeleteDialog

    protected bool isDeleteRoleDialogOpen = false;

    protected void OpenDeleteDialog(string roleName)
    {
        currentRoleName = roleName;
        isDeleteRoleDialogOpen = true;
    }

    protected async Task DeleteRoleAsync()
    {
        try
        {
            var response = await accountApiClient.DeleteRole(currentRoleName);

            if (response.IsSuccessStatusCode)
            {
                viewNotifier.Show(L["Operation Successful"], ViewNotifierType.Success);
                await InitializeRolesListAsync();
                await table.ReloadServerData();

            }
            else
                viewNotifier.Show(L["Operation Failed"], ViewNotifierType.Error);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private bool Search(RoleDto role)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;
        // if (role.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        // {
        //     return true;
        // }

        return false;
    }

    private async Task<TableData<RoleDto>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        await OnPage(state.Page, state.PageSize);

        return new TableData<RoleDto>() { TotalItems = totalItemsCount, Items = rolesList };

    }

    protected async Task OnPage(int index, int size)
    {
        pageSize = size;
        pageIndex = index;

        await InitializeRolesListAsync();
    }

    private async Task InvokeModal(string id = null)
    {
        var parameters = new DialogParameters();
        if (id != null)
        {
            role = rolesList.FirstOrDefault(c => c.Id.ToString() == id);
            if (role != null)
            {
                parameters.Add(nameof(RoleModal.RoleModel), new RoleDto
                    {
                        Id = role.Id,
                        Name = role.Name,
                        Description = role.Description
                    });
            }
        }
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackdropClick = true };
        var dialog = _dialogService.Show<RoleModal>(id == Guid.Empty.ToString() ? "Create" : "Edit", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await InitializeRolesListAsync();

            await table.ReloadServerData();
        }
    }

    private void ManagePermissions(string roleId)
    {
        _navigationManager.NavigateTo($"/admin/role-permissions/{roleId}");
    }

    private async Task Delete(string id)
    {
        string deleteContent = "Delete Content";
        var parameters = new DialogParameters
            {
                {nameof(DeleteConfirmation.ContentText), string.Format(deleteContent, id)}
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackdropClick = true };
        var dialog = _dialogService.Show<DeleteConfirmation>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var response = await _accountApiClient.DeleteRole(id);
            if (response.IsSuccessStatusCode)
            {
                await InitializeRolesListAsync();
                // await HubConnection.SendAsync(ApplicationConstants.SignalR.SendUpdateDashboard);

                await table.ReloadServerData();
                viewNotifier.Show(response.Message, ViewNotifierType.Success);
            }
            else
            {
                await InitializeRolesListAsync();

                viewNotifier.Show(response.Message, ViewNotifierType.Error);

                // foreach (var message in response.Messages)
                // {
                //     viewNotifier.Add(message, Severity.Error);
                // }
            }
        }
    }

    #endregion
}
