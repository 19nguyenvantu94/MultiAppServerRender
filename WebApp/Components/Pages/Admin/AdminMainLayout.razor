@using WebApp.State
@using static WebApp.Components.Pages.Account.Login
@inherits LayoutComponentBase
@attribute [Authorize(Policies.IsAdmin)]

<MudThemeProvider Theme="_currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<AuthorizeView>

    <Authorized>
        <MudLayout>
            <CascadingValue Value="this">
                <MudAppBar Elevation="25">
                    <MudIcon Icon="@CustomIcons.BlazorHero" Size="Size.Large" ViewBox="0 0 500 500" />
                    <MudText Typo="Typo.h6" Class="ml-4">MultiApp</MudText>
                    <MudToolBar DisableGutters="true">
                        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
                    </MudToolBar>
                    <MudSpacer />
                    <MudTooltip Text="Toggle Dark Mode">
                        <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => ToggleDarkMode())" />
                    </MudTooltip>
                    <AccountProfile />
                </MudAppBar>
                <MudDrawer @bind-Open="_navMenuOpened" Elevation="25" ClipMode="DrawerClipMode.Always">
                    <AdminNavMenu />
                </MudDrawer>
                <MudMainContent Style="min-height: 100vh; display: flex; flex-direction: column">
                    <MudContainer MaxWidth="MaxWidth.False" Style="flex: 1">
                        @Body
                    </MudContainer>
                    <footer class="page-footer">
                        <TenantInfo />
                    </footer>
                </MudMainContent>
            </CascadingValue>
        </MudLayout>
    </Authorized>
</AuthorizeView>

@code {

    private MudTheme _currentTheme;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    bool _navMenuOpened = true;

    bool _toggleDarkMode = true;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject] AppState appState { get; set; }

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }
    private UserProfileViewModel? profile { get; set; }

    protected override async Task OnInitializedAsync()
    {

        _currentTheme = BlazorHeroTheme.DefaultTheme;

        var user = (await authenticationStateTask).User;

        if (user.Identity!.IsAuthenticated)
        {
            profile = await appState.GetUserProfile();

            _navMenuOpened = profile.IsNavOpen;

            _toggleDarkMode = profile.IsDarkMode;
            _currentTheme = _toggleDarkMode

        ? BlazorHeroTheme.DefaultTheme
        : BlazorHeroTheme.DarkTheme;
        }

        await Task.CompletedTask;

    }

    private void DrawerToggle()
    {
        _navMenuOpened = !_navMenuOpened;
    }

    private async Task ToggleDarkMode()
    {
        _toggleDarkMode = !_toggleDarkMode;

        _currentTheme = _toggleDarkMode
            ? BlazorHeroTheme.DefaultTheme
            : BlazorHeroTheme.DarkTheme;

        await Task.FromResult(true);
    }

    private void Logout()
    {
        var parameters = new DialogParameters
            {
                {nameof(Dialogs.Logout.ContentText), $"Logout Confirmation"},
                {nameof(Dialogs.Logout.ButtonText), $"Logout"},
                {nameof(Dialogs.Logout.Color), Color.Error}
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        _dialogService.Show<Dialogs.Logout>("Logout", parameters, options);
    }
}
