@page "/login"
@using System.Net
@using System.Web
@using IdentityModel.Client
@using IdentityServer4
@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.IdentityModel.Protocols.OpenIdConnect
@using System.Globalization
@using WebApp.Pages


@attribute [AllowAnonymous]


<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
    <MudPaper Elevation="25" Class="pa-8" Style="width: 500px;">
        @if (loginViewModel == null)
        {
            <LoadingBackground />
        }
        else
        {
            @if (loginViewModel.EnableLocalLogin)
            {
                <EditForm Model="@loginViewModel" FormName="Name" OnValidSubmit="SubmitAsync">
                    <FluentValidationValidator @ref="_fluentValidationValidator" />
                    <MudGrid>
                        <MudItem xs="12">
                            <div class="d-flex justify-center">
                                <MudIcon Icon="@CustomIcons.BlazorHero" Color="Color.Primary" Size="Size.Large" ViewBox="0 0 500 500" Style="width: 100px; height: 100px;" />
                            </div>
                        </MudItem>
                        <DataAnnotationsValidator />
                        <MudItem xs="12">
                            <div class="d-flex justify-center">
                                <MudText Typo="Typo.h4">Blazor Server App</MudText>
                            </div>
                        </MudItem>
                        <MudItem xs="12">
                            <div class="d-flex justify-center">
                            </div>
                        </MudItem>
                        @*                         <MudItem xs="12">
                <div class="d-flex justify-center">
                <MudText>Don't have an account? <MudLink Href="/register">Register here</MudLink></MudText>
                </div>
                </MudItem> *@
                        <MudItem xs="12">
                            <MudTextField T="string" Label="UserName" Variant="Variant.Outlined"
                                          @bind-Value="loginViewModel.UserName" For="@(() => loginViewModel.UserName)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Password" Variant="Variant.Outlined"
                                          @bind-Value="loginViewModel.Password" For="@(() => loginViewModel.Password)"
                                          InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-space-between align-center">

                            <MudCheckBox @bind-Value="@loginViewModel.AllowRememberLogin" Class="ml-n2">RememberMe</MudCheckBox>
                            <MudLink Href="/account/forgot-password">Forgot password?</MudLink>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-center">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Disabled="@(!Validated)" Color="Color.Primary" Size="Size.Large" Style="width: 100%;">Sign In</MudButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            }

            @if (loginViewModel.VisibleExternalProviders.Any())
            {
                <br />
                <MudCard Elevation="2">
                    @*    <MudCardHeader>
            <CardHeaderContent>
            @if (!loginViewModel.EnableLocalLogin)
            {
            <MudIconButton Icon="@Icons.Material.Filled.Home" Class="ml-auto" Link="/" />
            <div class="logo">
            <a href="/" title="@appState.AppName Home"><img src=@($"{Module.ContentPath}/images/logo.svg") style="width:100px;" title="@appState.AppName Home" alt="@appState.AppName" /><br />@appState.AppName</a>
            <br />
            </div>
            }
            <MudText Typo="Typo.h5" Align="Align.Center">@"Sign in with"]</MudText>
            </CardHeaderContent>
            </MudCardHeader> *@
                    <MudCardContent Class="d-flex align-center flex-column">
                        @foreach (var provider in loginViewModel.VisibleExternalProviders)
                        {
                            @switch (provider.AuthenticationScheme)
                            {
                                case "Google":
                                case "Facebook":
                                    <MudButton Class="signInWithButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SignInWith(provider))">
                                        <img height="18" src="/images/@(provider.AuthenticationScheme.ToLower()).svg" />
                                    </MudButton>
                                    break;
                                case "Twitter":
                                case "Microsoft":
                                case "Apple":
                                    <MudButton Class="signInWithButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SignInWith(provider))"><img height="18" src="/images/@(provider.AuthenticationScheme.ToLower()).svg" />&nbsp;@provider.DisplayName</MudButton>
                                    break;
                                default:
                                    <MudButton Class="signInWithButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SignInWith(provider))">@provider.DisplayName</MudButton>
                                    break;
                            }
                        }
                    </MudCardContent>
                </MudCard>
            }

            @if (!loginViewModel.EnableLocalLogin && !loginViewModel.VisibleExternalProviders.Any())
            {
                <MudAlert Severity="Severity.Warning">
                    <strong>Invalid login request</strong>
                    There are no login schemes configured for this client.
                </MudAlert>
            }
        }
    </MudPaper>
</MudContainer>

@code {

    private FluentValidationValidator _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });
    public LoginViewModel loginViewModel;

    [SupplyParameterFromQuery] public string? ReturnUrl { get; set; }

    [Inject] protected IStringLocalizer<Localizer.Global> L { get; set; }

    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject] protected HttpClient httpClient { get; set; }

    private IdentityAuthenticationStateProvider identityAuthenticationStateProvider;

    [CascadingParameter] HttpContext Context { get; set; } = default!;

    private async Task SubmitAsync()
    {
        try
        {
            HttpClient httpClient = new HttpClient();

            var identityUrl = _configuration.GetRequiredValue("IdentityUrl");

            var disco = await httpClient.GetDiscoveryDocumentAsync(identityUrl);

            if (disco.IsError)
            {
                viewNotifier.Show("", ViewNotifierType.Error, "Login Failed!!!");
            }

            TokenClientOptions tokenClientOptions = new TokenClientOptions
                {
                    Address = disco.TokenEndpoint,
                    ClientId = "webapp",
                    ClientSecret = "secret"
                };

            var tokenclient = new TokenClient(httpClient, tokenClientOptions);

            var tokenResponse = await tokenclient.RequestPasswordTokenAsync(userName: loginViewModel.UserName, password: loginViewModel.Password, scope: $"openid identity offline_access");

            if (tokenResponse.IsError)
            {
                viewNotifier.Show("", ViewNotifierType.Error, "Login Failed!!!");
            }
            else
            {

                SaveTokenModel loginInputModel = new SaveTokenModel();

                loginInputModel.Access_Token = tokenResponse.AccessToken;
                loginInputModel.Refresh_Token = tokenResponse.RefreshToken;
                loginInputModel.Expire_In = DateTime.Now.AddSeconds(tokenResponse.ExpiresIn / 2);
                loginInputModel.ReturnUrl = "/admin";

                await SubmitServerForm("/server/login/", loginInputModel);

                //      if ((_httpContextAccessor.HttpContext is HttpContext context))
                //      {
                //          _httpContextAccessor.HttpContext!.Response.Cookies.Append("accessToken", tokenResponse.AccessToken,
                // new CookieOptions
                //     {
                //         Expires = DateTimeOffset.UtcNow.AddMinutes(5),
                //         HttpOnly = true,
                //         IsEssential = true,
                //         Secure = true,
                //         SameSite = SameSiteMode.None
                //     });
                //      }

                // // // var accessToken = await _httpContextAccessor!.HttpContext!.GetTokenAsync("access_token");

                //var auth = await _httpContextAccessor!.HttpContext!.AuthenticateAsync(CookieAuthenticationDefaults.AuthenticationScheme);

                // await _httpContextAccessor!.HttpContext!.ChallengeAsync(");

                // var data =  auth.Properties.Items.;

                //  auth.Properties.UpdateTokenValue("refresh_token", tokenResponse.RefreshToken);

                // var data = auth.Properties.Items;
                //data.Add("access_token", tokenResponse.AccessToken);

                // auth.Properties.StoreTokens(new List<AuthenticationToken>()
                // {
                //     new AuthenticationToken()
                //     {
                //         Name = "access_token",
                //         Value = tokenResponse.AccessToken
                //     },
                //     new AuthenticationToken()
                //     {
                //         Name = "refresh_token",
                //         Value = tokenResponse.RefreshToken
                //     },
                //     new AuthenticationToken()
                //     {
                //         Name = "expire_in",
                //         Value = DateTime.Now.AddSeconds(tokenResponse.ExpiresIn/2).ToString("dd/MM/yyyy")
                //     }
                // });

                // var data = GetAuthProperties(ReturnUrl ?? "/admin");

                // data.StoreTokens(new List<AuthenticationToken>()
                // {
                //     new AuthenticationToken()
                //     {
                //         Name = "access_token",
                //         Value = tokenResponse.AccessToken
                //     },
                //     new AuthenticationToken()
                //     {
                //         Name = "refresh_token",
                //         Value = tokenResponse.RefreshToken
                //     },
                //     new AuthenticationToken()
                //     {
                //         Name = "expire_in",
                //         Value = DateTime.Now.AddSeconds(tokenResponse.ExpiresIn / 2).ToString("dd/MM/yyyy")
                //     }
                // });

                // _httpContextAccessor!.HttpContext!.ChallengeAsync("oidc", new
                // AuthenticationProperties
                //     { RedirectUri = "/admin" });

                // _httpContextAccessor.HttpContext.User.Identity.isAuthenticated

                // ClaimsPrincipal claimsPrincipal = new ClaimsPrincipal
                //     {
                //         Identities = new IEnumerable
                //     };

                // _httpContextAccessor!.HttpContext!.SignInAsync(new ClaimsPrincipal(identity), data);

                // var accessToken = await _httpContextAccessor!.HttpContext!.GetTokenAsync("access_token");


                // var tokens = new List<AuthenticationToken>
                // {
                //     new AuthenticationToken {Name = OpenIdConnectParameterNames.AccessToken, Value = tokenResponse.AccessToken},
                //     new AuthenticationToken {Name = OpenIdConnectParameterNames.RefreshToken, Value = tokenResponse.RefreshToken}
                // };

                // var expiresAt = DateTime.UtcNow + TimeSpan.FromSeconds(tokenResponse.ExpiresIn / 2);

                // tokens.Add(new AuthenticationToken
                //     {
                //         Name = "expires_at",
                //         Value = expiresAt.ToString("o", CultureInfo.InvariantCulture)
                //     });

                // var prop = new AuthenticationProperties();

                // prop.StoreTokens(tokens);
                // prop.IsPersistent = true;

                // var identity = new ClaimsIdentity();

                // identity = new ClaimsIdentity(null, "Server authentication", "name", "role");

                // await Context.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(identity), prop);

                // _navigationManager.NavigateTo("/admin", true);

            }


            // loginViewModel.ReturnUrl = "";

            // var response = await identityAuthenticationStateProvider.Login(loginViewModel);

            // if (response.StatusCode != (int)HttpStatusCode.OK)
            // {
            //     viewNotifier.Show(string.Join(';', response.Message), ViewNotifierType.Error);
            // }
            // else
            // {
            //     if (string.IsNullOrEmpty(response.Result.ReturnUrl) || response.Result.ReturnUrl == "/" || response.Result.ReturnUrl == "/admin")
            //         loginViewModel.ReturnUrl = response.Result.LastPageVisited;

            //     if ((response.Result as LoginResponseModel)?.RequiresTwoFactor == true)
            //         loginViewModel.ReturnUrl = $"{AuthenPath.LoginWith2faPath}?returnurl={Uri.EscapeDataString(loginViewModel.ReturnUrl)}";

            //     _navigationManager.NavigateTo($"/connect/authorize/callback?client_id=webapp&redirect_uri=https://localhost:7221/signin-oidc&response_type=code&scope=openid profile files identity&code_challenge=V0te2O-lTHtnzs31DPq0k1XDgo02XJ6XMwsJ--lmw0M&code_challenge_method=S256&response_mode=form_post&nonce=638590784428127388.ZDQ5ZjVjMjUtNTllNS00YjY5LWIzNmItMzUyMGM5Zjk3ZjY3NTNkMGRjNGItNTE3ZC00NWVlLTgxOGItM2RiNDcxZThjZWI4&state=CfDJ8K9yim51j7VOoa-D8gVl_ParnjovbajHT1gs4uA5YO2ZOHGDjjZuuBL-HUquBZtG6HIM-g_1AiZL_xzDkLAsSe23jYziP_MlLBkCgnU8JZLESq-WAoCj66wN-eHhjuIUvALNTiwie7AUFxD1cLQcNsgJ3OnIAoNOzzWDvuORNmmIaV4T7tCWiAYQGlwlpg2ZS0h0yBJtxrIz2t2TwKqALdH_zZ4AEzbjyaHvD4caYKjEC_2ptQy8gETvIQAqqPnLYtoJYlwYs4fc-QZQu_9o6TgiAoD-A_QdZR_R2zC5kDvF6hwnYWU_KyuS_jW1O4_JHzVgEXCauBlj8quVkVeyl1v-sybgGNjJbAshngOrBubK8MDY8bugSCxBAId6nVvlzg&x-client-SKU=ID_NET8_0&x-client-ver=7.1.2.0", true);
            // }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.Message, ViewNotifierType.Error, L["LoginFailed"]);
        }
    }

    private async Task SubmitServerForm(string path, AccountFormModel model)
    {
        model.__RequestVerificationToken = await _jsRuntime.InvokeAsync<string>("interop.getElementByName", "__RequestVerificationToken");

        await _jsRuntime.InvokeAsync<string>("interop.submitForm", path, model);
    }

    private async Task SignInWith(ExternalProvider externalProvider)
    {
    }

    private static AuthenticationProperties GetAuthProperties(string? returnUrl)
    {

        return new AuthenticationProperties { RedirectUri = "/admin" };
    }
    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    public class TokenRequest
    {
        [Required] public string Email { get; set; }

        [Required] public string Password { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public class CustomIcons
    {
        public static string BlazorHero { get; } = "<path d=\"M 37.00,90.00 C 37.00,90.00 328.90,90.00 328.90,90.00 328.90,90.00 328.90,410.00 328.90,410.00 328.90,410.00 37.00,410.00 37.00,410.00 37.00,410.00 37.00,90.00 37.00,90.00 Z M 381.49,90.75 C 381.49,90.75 464.00,90.75 464.00,90.75 464.00,90.75 464.00,410.00 464.00,410.00 464.00,410.00 381.49,410.00 381.49,410.00 381.49,410.00 381.49,280.80 381.49,280.80 381.49,280.80 337.37,280.80 337.37,280.80 337.37,280.80 337.37,220.44 337.37,220.44 337.37,220.44 381.49,220.44 381.49,220.44 381.49,220.44 381.49,90.75 381.49,90.75 Z M 119.51,150.36 C 119.51,150.36 119.51,220.44 119.51,220.44 119.51,220.44 236.91,220.44 236.91,220.44 236.91,220.44 236.91,280.80 236.91,280.80 236.91,280.80 119.51,280.80 119.51,280.80 119.51,280.80 119.51,349.64 119.51,349.64 119.51,349.64 246.39,349.64 246.39,349.64 246.39,349.64 246.39,150.36 246.39,150.36 246.39,150.36 119.51,150.36 119.51,150.36 Z\"/>";
    }

    // private void FillAdministratorCredentials()
    // {
    //     _tokenModel.Email = "mukesh@blazorhero.com";
    //     _tokenModel.Password = "123Pa$$word!";
    // }

    // private void FillBasicUserCredentials()
    // {
    //     _tokenModel.Email = "john@blazorhero.com";
    //     _tokenModel.Password = "123Pa$$word!";
    // }

    protected override async Task OnInitializedAsync()
    {
        if (_navigationManager.TryGetQueryString("ReturnUrl", out string url))
            ReturnUrl = url;

        var user = (await authenticationStateTask).User;

        if (user.Identity!.IsAuthenticated)
        {
            if (user.IsInRole("Administrator"))
            {
                _navigationManager.NavigateTo(ReturnUrl ?? "/admin");
            }
            else
            {
                _navigationManager.NavigateTo(ReturnUrl ?? "/");
            }
        }
        else
        {
            identityAuthenticationStateProvider = (IdentityAuthenticationStateProvider)authStateProvider;

            try
            {
                var apiResponse = await identityAuthenticationStateProvider.BuildLoginViewModel(ReturnUrl);

                if (apiResponse.IsSuccessStatusCode)
                {
                    loginViewModel = apiResponse.Result;

                    if (loginViewModel.IsExternalLoginOnly)
                    {
                        if (!string.IsNullOrEmpty(ReturnUrl))
                            ReturnUrl = Uri.EscapeDataString(ReturnUrl);
                        // we only have one option for logging in and it's an external provider
                        _navigationManager.NavigateTo($"{httpClient.BaseAddress}api/externalauth/challenge/{loginViewModel.ExternalLoginScheme}/{ReturnUrl}", true);
                    }
                }
                else
                    viewNotifier.Show(string.Join(",", apiResponse.Message), ViewNotifierType.Error, "LoginFailed");
            }
            catch (Exception ex)
            {
                viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, "LoginFailed");
            }
        }

        await Task.CompletedTask;
    }
}
