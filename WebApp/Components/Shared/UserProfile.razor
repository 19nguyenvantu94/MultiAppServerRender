@using Microsoft.AspNetCore.Components
@using WebApp.Components.Pages.Admin
@inject AuthenticationStateProvider authStateProvider

<AuthorizeView>
    <Authorized>
        @if (userViewModel == null)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else
        {
            <MudMenu AnchorOrigin="Origin.TopLeft">
                <ActivatorContent>
                    <MudAvatar Color="Color.Secondary">@userViewModel.UserName.Substring(0, 1)</MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudDivider Class="mb-2" />
                    <MudListItem Text="Account" Href="/account/profile" Icon="@Icons.Material.Outlined.Person" />
                    <MudListItem Text="Logout" Icon="@Icons.Material.Filled.Logout" OnClick="Logout" />
                </ChildContent>
            </MudMenu>
        }
    </Authorized>
</AuthorizeView>

@code {

    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    UserViewModel userViewModel;

    protected override async Task OnInitializedAsync()
    {
        // userViewModel = null;
        var user = (await authenticationStateTask).User;

        if (user.Identity!.IsAuthenticated)
            userViewModel = await ((IdentityAuthenticationStateProvider)authStateProvider).GetUserViewModel();
    }

    private void Logout()
    {
        var parameters = new DialogParameters
            {
                {nameof(Dialogs.Logout.ContentText), $"Logout Confirmation"},
                {nameof(Dialogs.Logout.ButtonText), $"Logout"},
                {nameof(Dialogs.Logout.Color), Color.Error}
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        _dialogService.Show<Dialogs.Logout>("Logout", parameters, options);
    }
}