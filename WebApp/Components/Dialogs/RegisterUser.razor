
<EditForm Model="@RegisterUserModel" OnValidSubmit="SubmitAsync">
    <FluentValidationValidator @ref="_fluentValidationValidator" />
    <MudDialog>
        <TitleContent>
            @{
                if (RegisterUserModel.Id.ToString() == Guid.Empty.ToString())
                {
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
                        Add New User
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.Update" Class="mr-3 mb-n1" />
                        Update User
                    </MudText>
                }
            }
        </TitleContent>
        <DialogContent>
            @*             <MudTextField Disabled hidden @bind-Value="RegisterUserModel.Id" />
            *@
            <MudTextField Disabled For="@(() => RegisterUserModel.UserName)" @bind-Value="RegisterUserModel.UserName" Label="User Name" />
            <MudTextField For="@(() => RegisterUserModel.FirstName)" @bind-Value="RegisterUserModel.FirstName" Label="First Name" />
            <MudTextField For="@(() => RegisterUserModel.LastName)" @bind-Value="RegisterUserModel.LastName" Label="Last Name" />
            <MudTextField Disabled For="@(() => RegisterUserModel.Email)" InputType="InputType.Email" @bind-Value="RegisterUserModel.Email" Label="Email" />
            <MudTextField Disabled For="@(() => RegisterUserModel.PhoneNumber)" @bind-Value="RegisterUserModel.PhoneNumber" Label="Phone Number" />
            <MudTextField For="@(() => RegisterUserModel.Password)" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" @bind-Value="RegisterUserModel.Password" Label="Password" />
            <MudTextField For="@(() => RegisterUserModel.ConfirmPassword)" InputType="InputType.Password" @bind-Value="RegisterUserModel.ConfirmPassword" OnAdornmentClick="TogglePasswordVisibility" Label="Confirm Password" />
            <MudCheckBox T="bool" @bind-Checked="@RegisterUserModel.ActivateUser" Label="Activate User?" Color="Color.Primary"></MudCheckBox>
            <MudCheckBox T="bool" @bind-Checked="@RegisterUserModel.AutoConfirmEmail" Label="Auto Confirm Email?" Color="Color.Primary"></MudCheckBox>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="Cancel">Cancel</MudButton>
            @{
                <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Disabled="@(!Validated)" Color="Color.Success">Save</MudButton>
            }
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private FluentValidationValidator _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });
    public readonly RegisterViewModel RegisterUserModel = new();
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task SubmitAsync()
    {
        var response = RegisterUserModel.Id == Guid.Empty ? await _accountApiClient.CreateUser(RegisterUserModel) : await _accountApiClient.UpdateUser(RegisterUserModel);
        if (response.IsSuccessStatusCode)
        {
            viewNotifier.Show(response.Message, ViewNotifierType.Success);
            MudDialog.Close();
        }
        else
        {
            viewNotifier.Show(response.Message, ViewNotifierType.Error);

        }
    }

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }
}