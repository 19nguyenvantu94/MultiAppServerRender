@page "/login"
@using System.Net
@using BlazorWebApi.Users.Models.AccountViewModels
@using Microsoft.AspNetCore.WebUtilities


@attribute [AllowAnonymous]

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
    <MudPaper Elevation="25" Class="pa-8" Style="width: 500px;">


        <EditForm Model="@loginViewModel" FormName="Name" OnValidSubmit="SubmitAsync">
            <MudGrid>
                <MudItem xs="12">
                    <div class="d-flex justify-center">
                        <MudIcon Icon="@CustomIcons.BlazorHero" Color="Color.Primary" Size="Size.Large" ViewBox="0 0 500 500" Style="width: 100px; height: 100px;" />
                    </div>
                </MudItem>
                <DataAnnotationsValidator />
                <MudItem xs="12">
                    <div class="d-flex justify-center">
                        <MudText Typo="Typo.h4">Blazor Server App</MudText>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <div class="d-flex justify-center">
                    </div>
                </MudItem>
                @*                         <MudItem xs="12">
                <div class="d-flex justify-center">
                <MudText>Don't have an account? <MudLink Href="/register">Register here</MudLink></MudText>
                </div>
                </MudItem> *@
                <MudItem xs="12">
                    <MudTextField T="string" Label="UserName" Variant="Variant.Outlined"
                                  @bind-Value="loginViewModel.UserName" For="@(() => loginViewModel.UserName)" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="Password" Variant="Variant.Outlined"
                                  @bind-Value="loginViewModel.Password" For="@(() => loginViewModel.Password)"
                                  InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Style="width: 100%;">Sign In</MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {

    public LoginViewModel loginViewModel;

    [SupplyParameterFromQuery] public string ReturnUrl { get; set; }


    private async Task SubmitAsync()
    {
        try
        {
            // loginViewModel.ReturnUrl = ReturnUrl;

            // var response = await identityAuthenticationStateProvider.Login(loginViewModel);

            // if (response.StatusCode != (int)HttpStatusCode.OK)
            // {
            //     viewNotifier.Show(string.Join(';', response.Message), ViewNotifierType.Error);
            // }
            // else
            // {
            //     if (string.IsNullOrEmpty(response.Result.ReturnUrl) || response.Result.ReturnUrl == "/" || response.Result.ReturnUrl == "/admin")
            //         loginViewModel.ReturnUrl = response.Result.LastPageVisited;

            //     if ((response.Result as LoginResponseModel)?.RequiresTwoFactor == true)
            //         loginViewModel.ReturnUrl = $"{AuthenPath.LoginWith2faPath}?returnurl={Uri.EscapeDataString(loginViewModel.ReturnUrl)}";

            //     _navigationManager.NavigateTo($"{loginViewModel.ReturnUrl}", true);
            // }
        }
        catch (Exception ex)
        {
        }
    }

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    public class TokenRequest
    {
        [Required] public string Email { get; set; }

        [Required] public string Password { get; set; }
    }

    [ExcludeFromCodeCoverage]
    public class CustomIcons
    {
        public static string BlazorHero { get; } = "<path d=\"M 37.00,90.00 C 37.00,90.00 328.90,90.00 328.90,90.00 328.90,90.00 328.90,410.00 328.90,410.00 328.90,410.00 37.00,410.00 37.00,410.00 37.00,410.00 37.00,90.00 37.00,90.00 Z M 381.49,90.75 C 381.49,90.75 464.00,90.75 464.00,90.75 464.00,90.75 464.00,410.00 464.00,410.00 464.00,410.00 381.49,410.00 381.49,410.00 381.49,410.00 381.49,280.80 381.49,280.80 381.49,280.80 337.37,280.80 337.37,280.80 337.37,280.80 337.37,220.44 337.37,220.44 337.37,220.44 381.49,220.44 381.49,220.44 381.49,220.44 381.49,90.75 381.49,90.75 Z M 119.51,150.36 C 119.51,150.36 119.51,220.44 119.51,220.44 119.51,220.44 236.91,220.44 236.91,220.44 236.91,220.44 236.91,280.80 236.91,280.80 236.91,280.80 119.51,280.80 119.51,280.80 119.51,280.80 119.51,349.64 119.51,349.64 119.51,349.64 246.39,349.64 246.39,349.64 246.39,349.64 246.39,150.36 246.39,150.36 246.39,150.36 119.51,150.36 119.51,150.36 Z\"/>";
    }

    // private void FillAdministratorCredentials()
    // {
    //     _tokenModel.Email = "mukesh@blazorhero.com";
    //     _tokenModel.Password = "123Pa$$word!";
    // }

    // private void FillBasicUserCredentials()
    // {
    //     _tokenModel.Email = "john@blazorhero.com";
    //     _tokenModel.Password = "123Pa$$word!";
    // }

    protected override async Task OnInitializedAsync()
    {
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);

        string urlCallBack = "";

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("ReturnUrl", out var valueFromQueryString))
        {



            urlCallBack = valueFromQueryString.ToString();
        }
    }

    // var user = (await authenticationStateTask).User;

    // if (user.Identity!.IsAuthenticated)
    // {
    //     if (user.IsInRole("Administrator"))
    //     {
    //         _navigationManager.NavigateTo(ReturnUrl ?? "/admin");

    //     }
    //     else
    //     {
    //         _navigationManager.NavigateTo(ReturnUrl ?? "/");

    //     }
    // }
    // else
    // {
    //     identityAuthenticationStateProvider = (IdentityAuthenticationStateProvider)authStateProvider;

    //     try
    //     {
    //         var apiResponse = await identityAuthenticationStateProvider.BuildLoginViewModel(ReturnUrl);

    //         if (apiResponse.IsSuccessStatusCode)
    //         {
    //             loginViewModel = apiResponse.Result;

    //             if (loginViewModel.IsExternalLoginOnly)
    //             {
    //                 if (!string.IsNullOrEmpty(ReturnUrl))
    //                     ReturnUrl = Uri.EscapeDataString(ReturnUrl);
    //                 // we only have one option for logging in and it's an external provider
    //                 _navigationManager.NavigateTo($"{httpClient.BaseAddress}api/externalauth/challenge/{loginViewModel.ExternalLoginScheme}/{ReturnUrl}", true);
    //             }
    //         }
    //         else
    //             viewNotifier.Show(string.Join(",", apiResponse.Message), ViewNotifierType.Error, "LoginFailed");
    //     }
    //     catch (Exception ex)
    //     {
    //         viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, "LoginFailed");
    //     }
    // }
}
