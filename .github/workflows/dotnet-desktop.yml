# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: WebApp Deploy

on:
  push:
      branches: [ "dev" ]
      paths:
           - "WebApp/**"
           - ".github/workflows/dotnet-desktop.yml"
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
   build-test-sonar:
    runs-on: windows-latest
    steps:

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
            dotnet-version: 8.0.x

      - name : Install Aspire
        run: dotnet workload install aspire
      
      # - name: Restore workload
      #   run : dotnet workload restore
 
      - name: Restore dependencies
        run: dotnet restore

      - name: Build Solution
        run: dotnet build --no-restore --configuration Release

      - name: Run Unit Tests
        run: dotnet test --no-build --configuration Release --logger trx --results-directory "TestResults"

      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
         .\.sonar\scanner\dotnet-sonarscanner begin /k:"nguyenvantu123_MultiAppServerRender" /o:"nguyenvantu123" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"


   # deploy:
   #   runs-on: ubuntu-latest
   #   steps:
   #   - name: Login to Docker Hub
   #     uses: docker/login-action@v3
   #     with:
   #       username: nguyenvantu
   #       password: ${{ secrets.DOCKERHUB_TOKEN }}
   #   - name: Build container image
   #     run: docker build -f WebApp/Dockerfile -t webapp:$(echo $GITHUB_SHA | head -c7) .
   #   - name: Log in to DigitalOcean Container Registry with short-lived credentials
   #     run: doctl registry login --expiry-seconds 1200
   #   - name: Push image to Docker Hub
   #     run: docker push webapp:$(echo $GITHUB_SHA | head -c7) nguyenvantu/webapp:$(echo $GITHUB_SHA | head -c7)
   #   - name: Install doctl
   #     uses: digitalocean/action-doctl@v2
   #     with:
   #      token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
   #   - name: Update deployment file
   #     run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|image|nguyenvantu/webapp:'${TAG}'|' MultiAppServer.AppHost/aspirate-output/webapp/deployment.yaml
   #   - name: Save DigitalOcean kubeconfig with short-lived credentials
   #     run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}
   #   - name: Deploy to DigitalOcean Kubernetes
   #     run: kubectl replace -f MultiAppServer.AppHost/aspirate-output/webapp/deployment.yaml
   #   - name: Verify deployment
   #     run: kubectl rollout status deployment/webapp
      