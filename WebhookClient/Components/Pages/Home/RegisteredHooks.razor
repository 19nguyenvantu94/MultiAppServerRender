@inject WebhooksClient WebhooksClient

@if (webhooks is null)
{
    <div class="grid-placeholder">Loading...</div>
}
else if (webhooks.Any())
{
    @* <QuickGrid Items="@webhooks">
        <PropertyColumn Sortable="@true" IsDefaultSortColumn="true" InitialSortDirection="@SortDirection.Descending" Title="Date" Property="@(hook => hook.Date)" />
        <PropertyColumn Sortable="@true" Title="Destination" Property="@(hook => hook.DestUrl)" />
        <PropertyColumn Sortable="@true" Title="Token" Property="@(hook => hook.Token)" />
    </QuickGrid> *@

    <SfGrid DataSource="@webhooks" AllowPaging="true" AllowSorting="true">
        <GridColumns>
            <GridColumn Field=@nameof(WebhookResponse.Date) HeaderText="Date" TextAlign="TextAlign.Right" Width="120"></GridColumn>
            <GridColumn Field=@nameof(WebhookResponse.DestUrl) HeaderText="DestUrl" Width="150"></GridColumn>
            <GridColumn Field=@nameof(WebhookResponse.Token) HeaderText="Token" TextAlign="TextAlign.Right" Width="130"></GridColumn>
        </GridColumns>
    </SfGrid>
}
else
{
    <div class="grid-placeholder">None registered</div>
}

@code {
    List<WebhookResponse>? webhooks;

    protected override async Task OnInitializedAsync()
    {
        webhooks = new List<WebhookResponse>();
    }
}
