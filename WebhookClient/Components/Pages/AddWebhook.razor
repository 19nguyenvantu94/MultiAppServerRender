@page "/add-webhook"
@using Microsoft.Extensions.Options
@inject IOptions<WebhookClientOptions> options
@inject NavigationManager Nav
@inject WebhooksClient WebhooksClient

<h2>Register a new webhook</h2>

<p>This page registers the "OrderPaid" Webhook by sending a POST to the WebHooks API. Once the Webhook is set, you will be able to see new paid orders from the <a href="">home</a> page.</p>

<form @onsubmit="RegisterAsync">
    <p>
        Token:
        <input type="text" @bind="@token" placeholder="Token" />
    </p>
    <button class="action" type="submit">Register</button>
</form>

@if (!string.IsNullOrEmpty(message))
{
    <p class="error-message">@message</p>
}

@code {
    string? token;
    string? message;

    protected override void OnInitialized()
    {
        token = options.Value.Token;
    }

    private async Task RegisterAsync()
    {
        if (string.IsNullOrEmpty(token))
        {
            return;
        }

        message = null;
        var baseUrl = !string.IsNullOrEmpty(options.Value.SelfUrl)
            ? options.Value.SelfUrl
            : Nav.BaseUri;
        var granturl = $"{baseUrl}check";
        var url = $"{baseUrl}webhook-received";

        var payload = new WebhookSubscriptionRequest
            {
                Event = "OrderPaid",
                GrantUrl = granturl,
                Url = url,
                Token = token
            };

        string token123 = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjUwQzFGQTFENjA1MzFCRDhDRjU1NUMzQURDNjYwMzM0IiwidHlwIjoiYXQrand0In0.eyJpc3MiOiJodHRwczovL2JsYXpvcndlYmlkZW50aXR5Lm11bHRpYXBwYXV0aGVuLm9ubGluZSIsIm5iZiI6MTc0MDczMjk4MiwiaWF0IjoxNzQwNzMyOTgyLCJleHAiOjE3NDA3MzY1ODIsInNjb3BlIjpbIm9wZW5pZCIsInByb2ZpbGUiLCJ3ZWJob29rcyIsIm9mZmxpbmVfYWNjZXNzIl0sImFtciI6WyJwd2QiXSwiY2xpZW50X2lkIjoid2ViaG9va3NjbGllbnQiLCJzdWIiOiIwOGRkNDExOC03ZjQ1LTQ1ZmItOGEwYS04NzliN2FjMzE2MjQiLCJhdXRoX3RpbWUiOjE3NDA3MzI5ODEsImlkcCI6ImxvY2FsIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW4iLCJ1bmlxdWVfbmFtZSI6ImFkbWluIiwibmFtZSI6IkFkbWluIE11bHRpQXBwIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFtZWlkZW50aWZpZXIiOiIwOGRkNDExOC03ZjQ1LTQ1ZmItOGEwYS04NzliN2FjMzE2MjQiLCJlbWFpbCI6Im5ndXllbnZhbnR1MDIwNzk0QGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwaG9uZV9udW1iZXIiOiIwMzM0MzM2MjMyIiwicGhvbmVfbnVtYmVyX3ZlcmlmaWVkIjpmYWxzZSwicm9sZSI6WyJBZG1pbiIsIkFwaUxvZ0l0ZW0uQ3JlYXRlIiwiQXBpTG9nSXRlbS5EZWxldGUiLCJBcGlMb2dJdGVtLlJlYWQiLCJBcGlMb2dJdGVtLlVwZGF0ZSIsIkFwcGxpY2F0aW9uUm9sZS5DcmVhdGUiLCJBcHBsaWNhdGlvblJvbGUuRGVsZXRlIiwiQXBwbGljYXRpb25Sb2xlLlJlYWQiLCJBcHBsaWNhdGlvblJvbGUuVXBkYXRlIiwiQXBwbGljYXRpb25Sb2xlQ2xhaW0uQ3JlYXRlIiwiQXBwbGljYXRpb25Sb2xlQ2xhaW0uRGVsZXRlIiwiQXBwbGljYXRpb25Sb2xlQ2xhaW0uUmVhZCIsIkFwcGxpY2F0aW9uUm9sZUNsYWltLlVwZGF0ZSIsIkFwcGxpY2F0aW9uVXNlci5DcmVhdGUiLCJBcHBsaWNhdGlvblVzZXIuRGVsZXRlIiwiQXBwbGljYXRpb25Vc2VyLlJlYWQiLCJBcHBsaWNhdGlvblVzZXIuVXBkYXRlIiwiQXBwbGljYXRpb25Vc2VyQ2xhaW0uQ3JlYXRlIiwiQXBwbGljYXRpb25Vc2VyQ2xhaW0uRGVsZXRlIiwiQXBwbGljYXRpb25Vc2VyQ2xhaW0uUmVhZCIsIkFwcGxpY2F0aW9uVXNlckNsYWltLlVwZGF0ZSIsIkFwcGxpY2F0aW9uVXNlclJvbGUuQ3JlYXRlIiwiQXBwbGljYXRpb25Vc2VyUm9sZS5EZWxldGUiLCJBcHBsaWNhdGlvblVzZXJSb2xlLlJlYWQiLCJBcHBsaWNhdGlvblVzZXJSb2xlLlVwZGF0ZSIsIkxvY2FsaXphdGlvblJlY29yZC5DcmVhdGUiLCJMb2NhbGl6YXRpb25SZWNvcmQuRGVsZXRlIiwiTG9jYWxpemF0aW9uUmVjb3JkLlVwZGF0ZSIsIlBlcm1pc3Npb25zLlJvbGVDbGFpbXMuQ3JlYXRlIiwiUGVybWlzc2lvbnMuUm9sZUNsYWltcy5EZWxldGUiLCJQZXJtaXNzaW9ucy5Sb2xlQ2xhaW1zLkVkaXQiLCJQZXJtaXNzaW9ucy5Sb2xlQ2xhaW1zLlNlYXJjaCIsIlBlcm1pc3Npb25zLlJvbGVDbGFpbXMuVmlldyIsIlJvbGUuQ3JlYXRlIiwiUm9sZS5EZWxldGUiLCJSb2xlLlJlYWQiLCJSb2xlLlVwZGF0ZSIsIlRlbmFudC5DcmVhdGUiLCJUZW5hbnQuRGVsZXRlIiwiVGVuYW50LlJlYWQiLCJUZW5hbnQuVXBkYXRlIiwiVGVuYW50U2V0dGluZy5DcmVhdGUiLCJUZW5hbnRTZXR0aW5nLkRlbGV0ZSIsIlRlbmFudFNldHRpbmcuUmVhZCIsIlRlbmFudFNldHRpbmcuVXBkYXRlIiwiVXNlci5DcmVhdGUiLCJVc2VyLkRlbGV0ZSIsIlVzZXIuUmVhZCIsIlVzZXIuVXBkYXRlIl0sInNpZCI6IjZBNzkwMUZDMzFFRUVGNDE4OTQ0Rjc1NTZEMTY1NjZEIn0.EzuqZKG506bYNf3ZY8zWGjY55EpXxv9ZHu-TELkOIy4bX1HX1kknLMx208huM2tKDijSMZidq7uCv4tcqeshYG-EMsbyWCyBbxS3HB3KkepL7e6TmKxnrpzgXhWik_vm9SDX_I4RfoWHTqp_weCWqqJfmmeqrSblRaYB0rVp5d-XHNTRKAuFOfYqr0TfamB4SWi-MTQG1P8BH8E2EIyctN-msyPQkO7kPknbd9HklCEmVHbZef7V33Z4RnrSKOtTlFwXKn8kMGUSytZvf9CBfigNg6AoGk3wnOQLgdewzbB7i-tqCB8Inax4h8_ZgxmnxMjD4svt_ZheIohTiCrAAw";

        var response = await WebhooksClient.AddWebHookAsync(payload, token123);
        if (response.IsSuccessStatusCode)
        {
            Nav.NavigateTo("");
        }
        else
        {
            message = $"Registation was rejected with status {(int)response.StatusCode} {response.ReasonPhrase}";
        }
    }
}
