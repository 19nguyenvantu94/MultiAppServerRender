@page "/login"
@layout MainLayout
@using BlazorWeb.Components.Layout
@using BlazorWeb.Extensions
@using BlazorWeb.Request.Identity
@using BlazorWeb.Response.Identity
@using BlazorWeb.Services
@using BlazorWeb.Services.BffApiClients
@using BlazorWeb.Settings
@using BlazorWeb.Wrapper
@using BlazorWebApi.Users.Configurations
@using Microsoft.Extensions.Options
@attribute [AllowAnonymous]
@inject Microsoft.Extensions.Localization.IStringLocalizer<Login> _localizer
@inject IBffApiClients bffApiClients
@inject ILoadingService LoadingService

<EditForm Model="_tokenModel" FormName="loginForm" OnValidSubmit="SubmitAsync">
    <FluentValidationValidator @ref="_fluentValidationValidator" />

    <MudGrid>
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudIcon Icon="@CustomIcons.BlazorHero" Color="Color.Primary" Size="Size.Large" ViewBox="0 0 500 500" Style="width: 100px; height: 100px;" />
            </div>
        </MudItem>
        <DataAnnotationsValidator />
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudText Typo="Typo.h4">@_localizer["Title"]</MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudText>@_localizer["Description"]</MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudText>@_localizer["Don't have an account?"] <MudLink Href="/register">@_localizer["Register here"]</MudLink></MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            <MudTextField T="string" Label="@_localizer["UserName"]" Variant="Variant.Outlined"
                          @bind-Value="_tokenModel.UserName" For="@(() => _tokenModel.UserName)" />
        </MudItem>
        <MudItem xs="12">
            <MudTextField Label="@_localizer["Password"]" Variant="Variant.Outlined"
                          @bind-Value="_tokenModel.Password" For="@(() => _tokenModel.Password)"
                          InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-space-between align-center">
            <MudCheckBox T="bool" @bind-Value="_tokenModel.IsRemember" Label="@_localizer["Remember me?"]" Color="Color.Primary" Class="ml-n1"></MudCheckBox> <MudLink Href="/account/forgot-password">@_localizer["Forgot password?"]</MudLink>
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-center">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Disabled="@(!Validated)" Color="Color.Primary" Size="Size.Large" Style="width: 100%;">@_localizer["Sign In"]</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    private FluentValidationValidator _fluentValidationValidator { get; set; }
    private bool Validated => _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });
    private TokenRequest _tokenModel { get; set; } = new TokenRequest { UserName = "adminstrator", Password = "Abc@12345" };

    private MudTheme _currentTheme { get; set; }

    private bool _passwordVisibility;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool isLoading = false;

    // [SupplyParameterFromQuery]
    // public string? returnUrl { get; set; }


    string GetQueryParm(string parmName)
    {
        var uriBuilder = new UriBuilder(_navigationManager.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        return q[parmName] ?? "";
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await _stateProvider.GetAuthenticationStateAsync();

        if (state.Equals(new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity()))))
        {

            var returnUrl = GetQueryParm("returnUrl");

            _navigationManager.NavigateTo($"{returnUrl}", true);
        }
    }

    private async Task SubmitAsync()
    {

        var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = false, NoHeader = true };

        var dialogRef = _dialogService.Show<GlobalLoadingIndicator>("", options);
        try
        {

            var httpresponse = await bffApiClients.LoginAsync(_tokenModel);

            var result = await httpresponse.ToResult<TokenResponse>();


            if (result.Success)
            {

                await _stateProvider.Login(result.Result.AccessToken, result.Result.RefreshToken);

                _navigationManager.NavigateTo(_navigationManager.Uri.ToString(), true);
            }
            else
            {
                dialogRef.Close();


                foreach (var message in result.ErrorMessages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }

        finally
        {
            dialogRef.Close();
        }
    }

    void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }
}