@using BlazorWeb.Constants.Application
@using BlazorWeb.Request.Identity
@using BlazorWeb.Response.Identity
@using BlazorWeb.Response.User
@using BlazorWeb.Services
@using BlazorWeb.Services.BffApiClients
@using System.Net
@using Microsoft.AspNetCore.SignalR.Client
@inject Microsoft.Extensions.Localization.IStringLocalizer<MainLayout> _localizer

<MudAppBar Elevation="25">
    <MudIcon Icon="@CustomIcons.BlazorHero" Size="Size.Large" ViewBox="0 0 500 500" />
    <MudText Typo="Typo.h6" Class="ml-4">Blazor Hero</MudText>
    <MudToolBar DisableGutters="true">
        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
    </MudToolBar>
    <MudSpacer />
    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
        <MudDivider Vertical="true" FlexItem="true" DividerType="DividerType.Middle" Class="mx-4 my-5" />
        <LanguageSelector />
        <MudTooltip Text="@_localizer["Toggle Dark Mode"]">
            <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => ToggleDarkMode())" />
        </MudTooltip>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
        <LanguageSelector />
        <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" Dense="true">
            <div class="px-2">
                <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => ToggleDarkMode())" />
            </div>

        </MudMenu>
    </MudHidden>
    <MudMenu Dense="true" Class="mt-1 ml-4">
        <ActivatorContent>
            @if (string.IsNullOrEmpty(ImageDataUrl))
            {
                <MudAvatar Color="Color.Secondary">@FirstLetterOfName</MudAvatar>
            }
            else
            {
                <MudImage Image="@ImageDataUrl" Style="height:50px; width:50px;"> </MudImage>
            }
        </ActivatorContent>
        <ChildContent>
            <MudDivider Class="mb-2" />
            <MudListItem Text="@_localizer["Account"]" Href="/account" Icon="@Icons.Material.Outlined.Person" />
            <MudListItem Text="@_localizer["Logout"]" Icon="@Icons.Material.Filled.Logout" OnClick="Logout" />
        </ChildContent>
    </MudMenu>
</MudAppBar>

<MudDrawer @bind-Open="_drawerOpen" Elevation="25" ClipMode="DrawerClipMode.Always">
    <NavMenu />
</MudDrawer>
<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
        <CascadingValue Value="hubConnection">
            @ChildContent
        </CascadingValue>
    </MudContainer>
</MudMainContent>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback OnDarkModeToggle { get; set; }

    private bool _drawerOpen = true;

    private string CurrentUserId { get; set; }
    private string ImageDataUrl { get; set; }
    private string FirstName { get; set; }
    private string SecondName { get; set; }
    private string Email { get; set; }
    private string FirstLetterOfName { get; set; }

    [Inject] private IBffApiClients bff { get; set; }

    // [Inject] private ILocalStorageService _localService { get; set; }


    public async Task ToggleDarkMode()
    {
        await OnDarkModeToggle.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {


        hubConnection = hubConnection.TryInitialize(_navigationManager, _localStorageService);
        //await hubConnection.StartAsync();

        hubConnection.On<string, string, string>(ApplicationConstants.SignalR.ReceiveChatNotification, (message, receiverUserId, senderUserId) =>
        {
            if (CurrentUserId == receiverUserId)
            {
                _jsRuntime.InvokeAsync<string>("PlayAudio", "notification");
                _snackBar.Add(message, Severity.Info, config =>
                {
                    config.VisibleStateDuration = 10000;
                    config.HideTransitionDuration = 500;
                    config.ShowTransitionDuration = 500;
                    config.Action = _localizer["Chat?"];
                    config.ActionColor = Color.Primary;
                    config.Onclick = snackBar =>
                    {
                        _navigationManager.NavigateTo($"chat/{senderUserId}");
                        return Task.CompletedTask;
                    };
                });
            }
        });
        //hubConnection.On(ApplicationConstants.SignalR.ReceiveRegenerateTokens, async () =>
        //{
        //    try
        //    {
        //        var token = (await _localStorageService.GetItemAsync<string>(StorageConstants.Local.AuthToken));
        //        var refreshToken = (await _localStorageService.GetItemAsync<string>(StorageConstants.Local.RefreshToken));

        //        if (string.IsNullOrEmpty(token))
        //        {
        //            _snackBar.Add(_localizer["You are Logged Out."], Severity.Error);
        //            await _stateProvider.Logout();
        //            _navigationManager.NavigateTo("/");
        //        }

        //        var data = await _stateProvider.RefreshToken();
        //        if (data)
        //        {
        //            //await _stateProvider.Login(data.AccessToken, data.RefreshToken);
        //            _snackBar.Add(_localizer["Refreshed Token."], Severity.Success);
        //            _stateProvider._httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        //        }
        //        else
        //        {
        //            _snackBar.Add(_localizer["You are Logged Out."], Severity.Error);
        //            await _stateProvider.Logout();
        //            _navigationManager.NavigateTo("/");
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        Console.WriteLine(ex.Message);
        //        _snackBar.Add(_localizer["You are Logged Out."], Severity.Error);
        //        await _stateProvider.Logout();
        //        _navigationManager.NavigateTo("/");
        //    }
        //});
        hubConnection.On<string, string>(ApplicationConstants.SignalR.LogoutUsersByRole, async (userId, roleId) =>
        {
            if (CurrentUserId != userId)
            {
                //var rolesResponse = await _bffApiClients.GetAllRole();
                //if (rolesResponse.Success)
                //{
                //    var role = rolesResponse.Result.FirstOrDefault(x => x.Id == roleId);
                //    if (role != null)
                //    {
                //        //var currentUserRolesResponse = await _bffApiClients.GetRolesAsync();
                //        //if (currentUserRolesResponse.Success && currentUserRolesResponse.Result.UserRoles.Any(x => x.RoleName == role.Name))
                //        //{
                //        //    _snackBar.Add(_localizer["You are logged out because the Permissions of one of your Roles have been updated."], Severity.Error);
                //        //    await hubConnection.SendAsync(ApplicationConstants.SignalR.OnDisconnect, CurrentUserId);
                //        //    await _stateProvider.Logout();
                //        //    _navigationManager.NavigateTo("/login");
                //        //}
                //    }
                //}
            }
        });
        //hubConnection.On<string>(ApplicationConstants.SignalR.PingRequest, async (userName) =>
        //{
        //    await hubConnection.SendAsync(ApplicationConstants.SignalR.PingResponse, CurrentUserId, userName);

        //});

        //await hubConnection.SendAsync(ApplicationConstants.SignalR.OnConnect, CurrentUserId);

        await hubConnection.StartAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //     var availableToken = await _localStorageService.GetItemAsync<string>(StorageConstants.Local.AuthToken);

            //     var availableRefreshToken = await _localStorageService.GetItemAsync<string>(StorageConstants.Local.RefreshToken);

            //     var user = state.User;
            //     var exp = user.FindFirst(c => c.Type.Equals("exp"))?.Value;
            //     var expTime = DateTimeOffset.FromUnixTimeSeconds(Convert.ToInt64(exp));
            //     var timeUTC = DateTime.UtcNow;
            //     var diff = expTime - timeUTC;
            //     if (diff.TotalMinutes <= 10)
            //     {
            //         var response = await bff.RefreshTokenAsync(new RefreshTokenRequest { accessToken = availableToken, refreshToken = availableRefreshToken });

            //         var result = await response.ToResult<TokenResponse>();

            //         if (result.Success)
            //         {
            //             await _stateProvider.Login(result.Result.AccessToken, result.Result.RefreshToken);

            //         }
            //         else
            //         {
            //             await _stateProvider.Logout();
            //         }

            //         _navigationManager.NavigateTo($"/home?returnUrl={_navigationManager.Uri.ToString().Replace(_navigationManager.BaseUri, "")}", true);

            //     }

            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = false, NoHeader = true };

        var dialogRef = _dialogService.Show<GlobalLoadingIndicator>("", options);
        try
        {

            var accessToken = (await _localStorageService.GetItemAsync<string>(StorageConstants.Local.AuthToken));

            var refreshToken = (await _localStorageService.GetItemAsync<string>(StorageConstants.Local.RefreshToken));

            var response = await bff.UserProfile(accessToken);

            var result = await response.ToResult();

            if (result.StatusCode == (int)HttpStatusCode.Unauthorized)
            {
                // await _localStorageService.RemoveItemAsync(StorageConstants.Local.AuthToken);
                // await _localStorageService.RemoveItemAsync(StorageConstants.Local.RefreshToken);

                // _stateProvider.MarkUserAsLoggedOut();

                // _navigationManager.NavigateTo($"refreshToken?returnUrl={_navigationManager.Uri.ToString().Replace(_navigationManager.BaseUri, "")}", true);

                // accessToken = (await _localStorageService.GetItemAsync<string>(StorageConstants.Local.AuthToken));

                // var responseRefresh = await bff.RefreshTokenAsync(new RefreshTokenRequest { accessToken = accessToken, refreshToken = refreshToken });

                // var resultRefresh = await responseRefresh.ToResult();

                // if (resultRefresh.Success)
                // {
                //     var resultRefreshSuccess = await responseRefresh.ToResult<TokenResponse>();
                //     await _stateProvider.Login(resultRefreshSuccess.Result.AccessToken, resultRefreshSuccess.Result.RefreshToken);

                //     response = await bff.UserProfile(resultRefreshSuccess.Result.AccessToken);
                // }
                // else
                // {

                //     await _localStorageService.SetItemAsStringAsync(StorageConstants.Local.AuthToken, "");
                //     await _localStorageService.SetItemAsStringAsync(StorageConstants.Local.RefreshToken, "");

                //     _stateProvider.MarkUserAsLoggedOut();

                //     _navigationManager.NavigateTo("/", true);

                // }

            }

            if (result.StatusCode == (int)HttpStatusCode.OK)
            {

                var newResult = await response.ToResult<UserProfileResponse>();

                if (newResult.Success)
                {
                    FirstName = newResult.Result.FirstName;
                    SecondName = newResult.Result.LastName;
                    Email = newResult.Result.Email;
                    FirstLetterOfName = newResult.Result.FirstName.Substring(0, 1);

                    _snackBar.Add(string.Format(_localizer["Welcome {0}"], FirstName), Severity.Success);

                }

            }
        }
        catch (Exception ex)
        {
            throw ex;
        }

        finally
        {
            dialogRef.Close();
        }


        //var token = await _localStorageService.GetItemAsync<string>(StorageConstants.Local.AuthToken) ?? "";


        //if (!string.IsNullOrEmpty())
        //{
        //    var state = await _bffApiClients.UserProfile();

        //    try
        //    {
        //        if (state.Success)
        //        {
        //            //ImageDataUrl
        //            FirstName = state.Result.FirstName;
        //            SecondName = state.Result.LastName;
        //            Email = state.Result.Email;
        //            FirstLetterOfName = state.Result.FirstName.Substring(0, 1);
        //        }
        //    }
        //    catch (Exception ex)
        //    {

        //        throw;
        //    }


        //}
        //else
        //{
        //    await _stateProvider.Logout();
        //}
    }


    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void Logout()
    {
        var parameters = new DialogParameters
            {
                {nameof(Dialogs.Logout.ContentText), $"{_localizer["Logout Confirmation"]}"},
                {nameof(Dialogs.Logout.ButtonText), $"{_localizer["Logout"]}"},
                {nameof(Dialogs.Logout.Color), Color.Error},
                {nameof(Dialogs.Logout.CurrentUserId), CurrentUserId},
                {nameof(Dialogs.Logout.HubConnection), hubConnection}
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        _dialogService.Show<Dialogs.Logout>
    (_localizer["Logout"], parameters, options);
    }

    private HubConnection hubConnection;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
}
